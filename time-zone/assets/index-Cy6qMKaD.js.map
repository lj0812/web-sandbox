{"version":3,"mappings":"k4BAKO,MAAMA,EAAa,CAACC,EAAmBC,EAAyB,KAAe,CAClF,MAAMC,EAAO,IAAI,KAAKF,CAAS,EAYzBG,EAAe,CAAE,GAXe,CAClC,OAAQ,QACR,KAAM,UACN,MAAO,UACP,IAAK,UACL,KAAM,UACN,OAAQ,UACR,OAAQ,UACR,OAAQ,IAG8B,GAAGF,CAAA,EAE7C,OAAOC,EAAK,eAAeC,EAAa,OAAQ,CAC5C,SAAUA,EAAa,SACvB,KAAMA,EAAa,KACnB,MAAOA,EAAa,MACpB,IAAKA,EAAa,IAClB,KAAMA,EAAa,KACnB,OAAQA,EAAa,OACrB,OAAQA,EAAa,OACrB,OAAQA,EAAa,OACxB,CACL,EAqBaC,EAAqBC,GAA6B,CAC3D,MAAMC,MAAU,KACVC,EAAM,IAAI,KAAKD,EAAI,UAAaA,EAAI,oBAAsB,GAAM,EAChEE,EAAa,IAAI,KAAKD,EAAI,eAAe,QAAS,CAAE,SAAUF,CAAA,CAAU,CAAC,EACzEI,EAAU,IAAI,KAAKF,EAAI,eAAe,QAAS,CAAE,SAAU,MAAO,CAAC,EAEzE,OAAO,KAAK,OAAOC,EAAW,UAAYC,EAAQ,YAAc,IAAO,GAAG,CAC9E,EAMaC,GAAcL,GAA8B,CACrD,MAAMC,MAAU,KAGVK,EAAgBP,EAAkBC,CAAQ,EAG1CO,EAAON,EAAI,cAEXO,EADS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAE,EAC7B,IAAIC,GAAS,CAChC,MAAMZ,EAAO,IAAI,KAAKU,EAAME,EAAO,EAAE,EACrC,OAAOC,EAAwBV,EAAUH,CAAI,CACjD,CAAC,EAGKc,EAAY,KAAK,IAAI,GAAGH,CAAO,EAC/BI,EAAY,KAAK,IAAI,GAAGJ,CAAO,EAGrC,GAAIG,IAAcC,EACd,MAAO,CACH,MAAO,GACP,eAAgBN,EAChB,cAAAA,CAAA,EAOR,MAAMO,EAAgBH,EAAwBV,EAAU,IAAI,KAAKO,EAAM,EAAG,EAAE,CAAC,EACvEO,EAAaJ,EAAwBV,EAAU,IAAI,KAAKO,EAAM,EAAG,EAAE,CAAC,EAE1E,IAAIQ,EACAC,EAEJ,OAAIH,EAAgBC,GAEhBC,EAAiBF,EACjBG,EAAQV,EAAgBS,IAGxBA,EAAiBD,EACjBE,EAAQV,EAAgBS,GAGrB,CACH,MAAAC,EACA,eAAAD,EACA,cAAAT,CAAA,CAER,EAKMI,EAA0B,CAACV,EAAkBH,IAAuB,CACtE,MAAMK,EAAM,IAAI,KAAKL,EAAK,UAAaA,EAAK,oBAAsB,GAAM,EAClEM,EAAa,IAAI,KAAKD,EAAI,eAAe,QAAS,CAAE,SAAUF,CAAA,CAAU,CAAC,EACzEI,EAAU,IAAI,KAAKF,EAAI,eAAe,QAAS,CAAE,SAAU,MAAO,CAAC,EAEzE,OAAO,KAAK,OAAOC,EAAW,UAAYC,EAAQ,YAAc,IAAO,GAAG,CAC9E,EAKaa,GAAwBC,GAAoC,CACrE,MAAMC,EAAc,KAAK,MAAM,KAAK,IAAID,CAAe,EAAI,EAAE,EACvDE,EAAgB,KAAK,IAAIF,CAAe,EAAI,GAGlD,MAAO,MAFYA,GAAmB,EAAI,IAAM,GAEzB,GAAGC,EAAY,WAAW,SAAS,EAAG,GAAG,CAAC,IAAIC,EAAc,WAAW,SAAS,EAAG,GAAG,CAAC,EAClH,EAKaC,EAAmBrB,GAAmC,CAC/D,MAAMkB,EAAkBnB,EAAkBC,CAAQ,EAG5CgB,EAAQM,EAAqBtB,CAAQ,EAE3C,MAAO,CACH,OAAQiB,GAAqBC,CAAe,EAC5C,MAAAF,EACA,UAAWA,EAAQ,MAAQ,OAEnC,EAwBaM,EAAuB,CAACtB,EAAkBH,EAAa,IAAI,OAAoB,OACxF,GAAI,CAQA,MAAM0B,IAAeC,EANH,IAAI,KAAK,eAAe,KAAM,CAC5C,SAAUxB,EACV,aAAc,OACjB,EAEuB,cAAcH,CAAI,EACf,KAAK4B,GAAQA,EAAK,OAAS,cAAc,IAA/C,YAAAD,EAAkD,QAAS,GAQhF,MALsB,CAClB,WAAY,SAAU,MAAO,KAC7B,MAAO,MAAO,aAAc,eAGX,KAAKE,GACtBH,EAAa,SAASG,CAAS,EAEvC,MAAQ,CAEJ,OAAOrB,GAAWL,CAAQ,EAAE,KAChC,CACJ,EAgEa2B,GAAwB3B,GAAoC,CACrE,MAAMC,MAAU,KACV2B,EAAc3B,EAAI,cAGLqB,EAAqBtB,EAAUC,CAAG,EACrD,MAAM4B,EAASP,EAAqBtB,EAAU,IAAI,KAAK4B,EAAa,EAAG,EAAE,CAAC,EACpEE,EAASR,EAAqBtB,EAAU,IAAI,KAAK4B,EAAa,EAAG,EAAE,CAAC,EAG1E,GAAIC,IAAWC,EACX,MAAO,CACH,eAAgB,KAChB,mBAAoB,KACpB,oBAAqB,KACrB,eAAgB,KAChB,mBAAoB,KACpB,wBAAyB,MAKjC,MAAMC,EAAcC,EAAmBhC,EAAU4B,CAAW,EAG5D,GAAIG,EAAY,SAAW,EAAG,CAC1B,MAAME,EAAsBD,EAAmBhC,EAAU4B,EAAc,CAAC,EACxE,OAAOM,EAAmBD,EAAqBhC,EAAKD,CAAQ,CAChE,CAEA,OAAOkC,EAAmBH,EAAa9B,EAAKD,CAAQ,CACxD,EAKA,SAASgC,EAAmBhC,EAAkBO,EAAsB,CAChE,MAAMwB,EAAsB,GAG5B,QAAStB,EAAQ,EAAGA,EAAQ,GAAIA,IAE5B,QAAS0B,EAAM,EAAGA,GAAO,GAAIA,IACzB,GAAI,CACA,MAAMC,EAAW,IAAI,KAAK7B,EAAME,EAAO0B,CAAG,EAC1C,GAAIC,EAAS,aAAe3B,EAAO,MAEnC,MAAM4B,EAAU,IAAI,KAAK9B,EAAME,EAAO0B,EAAM,CAAC,EACvCG,EAAahB,EAAqBtB,EAAUoC,CAAQ,EACpDG,EAAUjB,EAAqBtB,EAAUqC,CAAO,EAElDC,IAAeC,GACfR,EAAY,KAAKK,CAAQ,CAEjC,MAAgB,CACZ,QACJ,CAIR,OAAOL,EAAY,KAAK,CAAC,EAAGS,IAAM,EAAE,UAAYA,EAAE,SAAS,CAC/D,CAKA,SAASN,EAAmBH,EAAqB9B,EAAWD,EAAiC,CACzF,GAAI+B,EAAY,SAAW,EACvB,MAAO,CACH,eAAgB,KAChB,mBAAoB,KACpB,oBAAqB,KACrB,eAAgB,KAChB,mBAAoB,KACpB,wBAAyB,MAKjC,IAAIU,EAA8B,KAC9BC,EAA8B,KAElC,UAAWC,KAAcZ,EACjBY,EAAW,UAAY1C,EAAI,WAAa,CAACwC,IACzCA,EAAiBE,GAEjBA,EAAW,WAAa1C,EAAI,YAC5ByC,EAAiBC,GAKzB,GAAI,CAACF,EAAgB,CACjB,MAAMR,EAAsBD,EAAmBhC,EAAUC,EAAI,cAAgB,CAAC,EAC1EgC,EAAoB,OAAS,IAC7BQ,EAAiBR,EAAoB,CAAC,EAE9C,CAEA,MAAO,CACH,eAAAQ,EACA,mBAAoBA,EAAiBG,EAAkBH,CAAc,EAAI,KACzE,oBAAqBA,EAAiBI,EAAuBJ,CAAc,EAAI,KAC/E,eAAAC,EACA,mBAAoBA,EAAiBE,EAAkBF,CAAc,EAAI,KACzE,wBAAyBA,EAAiBG,EAAuBH,CAAc,EAAI,KAE3F,CAKA,SAASE,EAAkB/C,EAA+B,CACtD,MAAMY,EAAQZ,EAAK,WAGnB,OAAQY,GAAS,GAAKA,GAAS,EAAK,SAAW,MACnD,CAKA,SAASoC,EAAuBhD,EAAoC,CAIhE,OAHuB+C,EAAkB/C,CAAI,IAGnB,SAAW,UAAY,UACrD,CAKA,SAASiD,GAAqB9C,EAAkBH,EAAoB,CAGhE,MAAMkD,EAAW,IAAI,KAAKlD,EAAK,cAAeA,EAAK,WAAYA,EAAK,SAAS,EAG7E,QAASmD,EAAO,EAAGA,GAAQ,EAAGA,IAAQ,CAClC,MAAMC,EAAW,IAAI,KAAKF,EAAS,UAAYC,EAAO,GAAK,GAAK,GAAI,EAC9DE,EAAW,IAAI,KAAKD,EAAS,UAAY,GAAK,GAAK,GAAI,EAE7D,GAAI3B,EAAqBtB,EAAUiD,CAAQ,IAAM3B,EAAqBtB,EAAUkD,CAAQ,EACpF,MAAO,GAAGF,CAAI,KAEtB,CAEA,MAAO,MACX,CAKO,MAAMG,GAA0B,CAACR,EAA2B3C,IAG9D,CACD,MAAMoD,EAAkBvD,GAAe,CACnC,MAAMwD,EAAUxD,EAAK,mBAAmB,QAAS,CAC7C,KAAM,UACN,MAAO,OACP,IAAK,UACL,QAAS,OACZ,EACKyD,EAAUR,GAAqB9C,EAAUH,CAAI,EACnD,MAAO,GAAGwD,CAAO,IAAIC,CAAO,EAChC,EAEMC,EAAoB,CAACC,EAA0CC,IAC7DD,IAAc,UAAkB,kBAChCA,IAAc,WAAmB,kBAC9B,GAGX,IAAIE,EAAW,GACXC,EAAW,GAEf,GAAIhB,EAAW,eAAgB,CAC3B,MAAMiB,EAAWjB,EAAW,qBAAuB,SAAW,WAAa,WAC3Ee,EAAW,MAAMN,EAAeT,EAAW,cAAc,CAAC;AAAA,EAAKiB,CAAQ;AAAA,EAAKL,EAAkBZ,EAAW,oBAAqBA,EAAW,kBAAkB,CAAC,EAChK,CAEA,GAAIA,EAAW,eAAgB,CAC3B,MAAMkB,EAAWlB,EAAW,qBAAuB,SAAW,WAAa,WAC3EgB,EAAW,MAAMP,EAAeT,EAAW,cAAc,CAAC;AAAA,EAAKkB,CAAQ;AAAA,EAAKN,EAAkBZ,EAAW,wBAAyBA,EAAW,kBAAkB,CAAC,EACpK,CAEA,MAAO,CAAE,SAAAe,EAAU,SAAAC,CAAA,CACvB,kQCpaA,MAAMG,EAAWC,EAAqB,CACpC,YAAa,KACb,UAAW,EACX,QAAS,KACT,SAAU,KACX,EAED,IAAIC,EAAuB,KAE3B,MAAMC,EAAoB,IAAM,CAC9B,MAAMhE,MAAU,KACVN,EAAYM,EAAI,UAEtB6D,EAAS,MAAQ,CACf,YAAapE,EAAWC,CAAS,EACjC,UAAAA,EACA,QAASM,EAAI,cAAc,QAAQ,IAAK,GAAG,EAAE,UAAU,EAAG,EAAE,EAC5D,SAAU,MAAO,CAACA,EAAI,oBAAsB,IAAO,EAAI,IAAM,EAAE,GAAG,CAACA,EAAI,oBAAsB,EAAE,GAEnG,EAEA,OAAAiE,EAAU,IAAM,CACdD,EAAA,EACAD,EAAQ,OAAO,YAAYC,EAAmB,GAAI,CACpD,CAAC,EAEDE,EAAY,IAAM,CACZH,GACF,cAAcA,CAAK,CAEvB,CAAC,UA9DCI,EAAA,EAAAC,EAwBM,MAxBNC,GAwBM,CAvBJC,EAAA,KAAAA,EAAA,GAAAC,EAAkB,UAAd,YAAS,KACbA,EAqBM,MArBNC,GAqBM,CApBJD,EAIM,MAJNE,GAIM,CAHJH,EAAA,KAAAA,EAAA,GAAAC,EAAa,UAAT,OAAI,KACRA,EAAmD,MAAnDG,GAAmDC,EAA7Bd,EAAA,MAAS,WAAW,KAC1CS,EAAA,KAAAA,EAAA,GAAAC,EAAmC,OAA9B,MAAM,eAAc,OAAI,OAE/BA,EAIM,MAJNK,GAIM,CAHJN,EAAA,KAAAA,EAAA,GAAAC,EAAY,UAAR,MAAG,KACPA,EAAiD,MAAjDM,GAAiDF,EAA3Bd,EAAA,MAAS,SAAS,KACxCS,EAAA,KAAAA,EAAA,GAAAC,EAAoC,OAA/B,MAAM,eAAc,QAAK,OAEhCA,EAIM,MAJNO,GAIM,CAHJR,EAAA,KAAAA,EAAA,GAAAC,EAAc,UAAV,QAAK,KACTA,EAA+C,MAA/CQ,GAA+CJ,EAAzBd,EAAA,MAAS,OAAO,KACtCS,EAAA,KAAAA,EAAA,GAAAC,EAAqC,OAAhC,MAAM,eAAc,SAAM,OAEjCA,EAIM,MAJNS,GAIM,CAHJV,EAAA,KAAAA,EAAA,GAAAC,EAAa,UAAT,OAAI,KACRA,EAAgD,MAAhDU,GAAgDN,EAA1Bd,EAAA,MAAS,QAAQ,KACvCS,EAAA,KAAAA,EAAA,GAAAC,EAAsC,OAAjC,MAAM,eAAc,UAAO,umCCnB3BW,EAA6B,CACtC,CAAE,GAAI,UAAW,SAAU,gBAAiB,KAAM,KAAM,KAAM,OAAQ,YAAa,CAAC,SAAU,OAAO,GACrG,CAAE,GAAI,UAAW,SAAU,mBAAoB,KAAM,KAAM,KAAM,OAAQ,YAAa,CAAC,QAAU,OAAO,GACxG,CAAE,GAAI,SAAU,SAAU,gBAAiB,KAAM,KAAM,KAAM,OAAQ,YAAa,CAAC,OAAS,OAAO,GACnG,CAAE,GAAI,QAAS,SAAU,eAAgB,KAAM,KAAM,KAAM,OAAQ,YAAa,CAAC,OAAQ,OAAO,GAChG,CAAE,GAAI,QAAS,SAAU,aAAc,KAAM,KAAM,KAAM,OAAQ,YAAa,CAAC,SAAU,OAAO,GAChG,CAAE,GAAI,SAAU,SAAU,mBAAoB,KAAM,KAAM,KAAM,OAAQ,YAAa,CAAC,SAAU,QAAQ,GACxG,CAAE,GAAI,aAAc,SAAU,sBAAuB,KAAM,MAAO,KAAM,OAAQ,YAAa,CAAC,UAAW,OAAO,GAChH,CAAE,GAAI,SAAU,SAAU,gBAAiB,KAAM,MAAO,KAAM,OAAQ,YAAa,CAAC,QAAS,OAAO,GACpG,CAAE,GAAI,QAAS,SAAU,aAAc,KAAM,KAAM,KAAM,OAAQ,YAAa,CAAC,QAAS,OAAO,GAC/F,CAAE,GAAI,WAAY,SAAU,oBAAqB,KAAM,MAAO,KAAM,OAAQ,YAAa,CAAC,SAAU,QAAQ,GAC5G,CAAE,GAAI,UAAW,SAAU,kBAAmB,KAAM,MAAO,KAAM,OAAQ,YAAa,CAAC,SAAW,OAAO,GACzG,CAAE,GAAI,SAAU,SAAU,eAAgB,KAAM,KAAM,KAAM,OAAQ,YAAa,CAAC,QAAS,MAAO,EACtG,EAGaC,EAA+B,CAExC,CACI,QAAS,MACT,QAAS,YACT,YAAa,+BACb,QAAS,gBACT,SAAU,UAEd,CACI,QAAS,OACT,QAAS,aACT,YAAa,qBACb,QAAS,0BACT,SAAU,UAEd,CACI,QAAS,QACT,QAAS,MACT,YAAa,mBACb,QAAS,0BACT,SAAU,UAEd,CACI,QAAS,OACT,QAAS,aACT,YAAa,YACb,QAAS,6BACT,SAAU,UAId,CACI,QAAS,KACT,QAAS,WACT,YAAa,eACb,QAAS,kCACT,SAAU,QAEd,CACI,QAAS,OACT,QAAS,kBACT,YAAa,YACb,QAAS,iBACT,SAAU,QAEd,CACI,QAAS,MACT,QAAS,uBACT,YAAa,iBACb,QAAS,aACT,SAAU,QAEd,CACI,QAAS,OACT,QAAS,gBACT,YAAa,sDACb,QAAS,qBACT,SAAU,QAEd,CACI,QAAS,SACT,QAAS,yBACT,YAAa,kDACb,QAAS,iCACT,SAAU,QAEd,CACI,QAAS,OACT,QAAS,mBACT,YAAa,2CACb,QAAS,kBACT,SAAU,QAEd,CACI,QAAS,QACT,QAAS,cACT,YAAa,0DACb,QAAS,8BACT,SAAU,QAId,CACI,QAAS,KACT,QAAS,OACT,YAAa,2CACb,QAAS,2BACT,SAAU,UAEd,CACI,QAAS,KACT,QAAS,QACT,YAAa,qDACb,QAAS,8BACT,SAAU,UAEd,CACI,QAAS,KACT,QAAS,eACT,YAAa,4BACb,QAAS,aACT,SAAU,UAEd,CACI,QAAS,KACT,QAAS,cACT,YAAa,8CACb,QAAS,yBACT,SAAU,UAEd,CACI,QAAS,UACT,QAAS,aACT,YAAa,mCACb,QAAS,oCACT,SAAU,UAEd,CACI,QAAS,UACT,QAAS,aACT,YAAa,8CACb,QAAS,mCACT,SAAU,UAEd,CACI,QAAS,KACT,QAAS,SACT,YAAa,4BACb,QAAS,aACT,SAAU,UAEd,CACI,QAAS,IACT,QAAS,SACT,YAAa,2BACb,QAAS,aACT,SAAU,UAEd,CACI,QAAS,SACT,QAAS,oBACT,YAAa,uCACb,QAAS,sBACT,SAAU,UAEd,CACI,QAAS,QACT,QAAS,eACT,YAAa,yBACb,QAAS,qBACT,SAAU,UAId,CACI,QAAS,OACT,QAAS,eACT,YAAa,qCACb,QAAS,yBACT,SAAU,SAEd,CACI,QAAS,OACT,QAAS,eACT,YAAa,gCACb,QAAS,sBACT,SAAU,SAEd,CACI,QAAS,SACT,QAAS,mBACT,YAAa,mCACb,QAAS,sBACT,SAAU,SAEd,CACI,QAAS,OACT,QAAS,mBACT,YAAa,kCACb,QAAS,iCACT,SAAU,SAId,CACI,QAAS,OACT,QAAS,gBACT,YAAa,aACb,QAAS,eACT,SAAU,QAEd,CACI,QAAS,OACT,QAAS,WACT,YAAa,UACb,QAAS,cACT,SAAU,QAEd,CACI,QAAS,MACT,QAAS,kBACT,YAAa,aACb,QAAS,kBACT,SAAU,QAEd,CACI,QAAS,OACT,QAAS,gBACT,YAAa,eACb,QAAS,0BACT,SAAU,QAId,CACI,QAAS,OACT,QAAS,SACT,YAAa,mCACb,QAAS,sBACT,SAAU,SAEd,CACI,QAAS,OACT,QAAS,kBACT,YAAa,YACb,QAAS,4CACT,SAAU,SAEd,CACI,QAAS,KACT,QAAS,MACT,YAAa,0CACb,QAAS,gBACT,SAAU,SAEd,CACI,QAAS,KACT,QAAS,eACT,YAAa,kCACb,QAAS,yBACT,SAAU,SAId,CACI,QAAS,SACT,QAAS,cACT,YAAa,aACb,QAAS,aACT,SAAU,gBAEd,CACI,QAAS,OACT,QAAS,eACT,YAAa,gBACb,QAAS,yBACT,SAAU,gBAEd,CACI,QAAS,QACT,QAAS,kBACT,YAAa,gBACb,QAAS,wBACT,SAAU,eAElB,EAGaC,EAAgB,CACzB,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAiBZ,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAWd,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBd,EAGaC,EAAmB,CAC5B,kBACA,eACA,gBACA,aACA,aACA,gBACA,kBACA,iBACA,iBACA,oBACA,kBACA,iBACA,oBACA,aACA,cACA,iBACA,iBACA,eACA,eACA,cACA,eACA,qBACJ,8vv9BC3SA,MAAMC,EAASxB,EAAA,EACTyB,EAAezB,EAAqB,IAAI,EACxC0B,EAAe1B,EAA4B,EAAE,EACnD,IAAI2B,EAAa,KACb1B,EAAuB,KAE3B,MAAM2B,EAAWC,EAAqB,EAAE,EAGlCC,EAAgBC,GAA2B,OAC7C,OAAIR,EAAiB,WAAS9D,EAAA2D,EAAa,KAAKY,GAAKA,EAAE,KAAOD,EAAK,EAAE,IAAvC,YAAAtE,EAA0C,WAAY,EAAE,EAC3E,UAEJsE,EAAK,MAAQ,UAAY,SACpC,EAGME,EAAiB,IAAM,CACzB,MAAM/F,EAAM,KAAK,MAEjBkF,EAAa,QAAQ,CAACW,EAAMG,IAAU,CAClC,GAAI,CAACH,EAAK,YAAa,OAEvB,MAAMI,EAAOxG,EAAWO,EAAK,CACzB,SAAU6F,EAAK,SACf,OAAQ,GACR,KAAM,UACN,OAAQ,UACX,EAEKK,EAAe9E,EAAgByE,EAAK,QAAQ,EAElD,IAAIM,EAAY,OACZC,EAAW,WAEXf,EAAiB,SAASQ,EAAK,QAAQ,GACvCM,EAAY,SACZC,EAAW,UACJF,EAAa,QACpBC,EAAY,MACZC,EAAW,OAGf,MAAMC,EAAiB,CACnB,GAAIR,EAAK,GACT,KAAMA,EAAK,KACX,KAAMA,EAAK,KACX,YAAaA,EAAK,YAClB,KAAAI,EACA,OAAQC,EAAa,OACrB,MAAOA,EAAa,MACpB,UAAAC,EACA,SAAAC,CAAA,EAGAV,EAASM,CAAK,EACd,OAAO,OAAON,EAASM,CAAK,EAAGK,CAAI,EAEnCX,EAAS,KAAKW,CAAI,CAE1B,CAAC,EAEDC,EAAA,CACJ,EAGMA,EAAgB,IAAM,CACxB,GAAI,CAACb,EAAO,OAEZ,MAAMc,EAAcb,EAAS,IAAIG,IAAS,CACtC,KAAMA,EAAK,KACX,MAAO,CAAC,GAAGA,EAAK,YAAaA,EAAK,IAAI,EACtC,OAAQ,MACR,WAAY,CAAC,GAAI,EAAE,EACnB,UAAW,CACP,MAAOD,EAAaC,CAAI,EACxB,YAAa,OACb,YAAa,EACb,WAAY,EACZ,YAAa,sBAEjB,MAAO,CACH,KAAM,GACN,UAAW,SAASA,EAAK,IAAI,WAAWA,EAAK,IAAI,IACjD,SAAU,MACV,SAAU,GACV,KAAM,CACF,KAAM,CACF,SAAU,GACV,QAAS,CAAC,EAAG,CAAC,GAElB,KAAM,CACF,SAAU,GACV,MAAO,OACP,gBAAiB,4BACjB,QAAS,CAAC,EAAG,CAAC,EACd,aAAc,EACd,YAAaD,EAAaC,CAAI,EAC9B,YAAa,EACb,WAAY,EACZ,YAAa,qBACjB,CACJ,EAEJ,SAAU,CACN,WAAY,CAAC,GAAI,EAAE,EACnB,UAAW,CACP,WAAY,EACZ,YAAa,qBACjB,CACJ,EACF,EAEFJ,EAAM,UAAU,CACZ,OAAQ,CAAC,CACL,KAAM,UACN,iBAAkB,MAClB,KAAMc,CAAA,CACT,EACJ,CACL,EAGMC,EAAU,IAAM,CACblB,EAAO,cAEZ,OAAO,uBAAS,MAAE,KAAMmB,GAAkB,CACtC,MAAMC,EAAWD,EAAsB,SAAWA,EAElDhB,EAAQiB,EAAQ,KAAKpB,EAAO,KAAM,EAGlCoB,EAAQ,YAAY,QAASC,EAAY,EAEzC,MAAMC,EAAS,CACX,gBAAiB,UACjB,MAAO,CACH,KAAM,aACN,KAAM,SACN,IAAK,GACL,UAAW,CACP,MAAO,UACP,SAAU,GACV,WAAY,OAChB,EAEJ,IAAK,CACD,IAAK,QACL,KAAM,GACN,KAAM,IACN,OAAQ,CAAC,GAAI,EAAE,EACf,UAAW,CACP,UAAW,UACX,YAAa,UACb,YAAa,IAEjB,SAAU,CACN,UAAW,CACP,UAAW,UACX,YAAa,UACjB,EAEJ,OAAQ,CACJ,UAAW,CACP,UAAW,UACf,CACJ,EAEJ,OAAQ,CAAC,CACL,KAAM,UACN,iBAAkB,MAClB,KAAM,GACN,WAAY,GACZ,OAAQ,MACR,SAAU,CACN,WAAY,GAChB,CACH,GAGLnB,EAAM,UAAUmB,CAAM,EACtBb,EAAA,EAGAN,EAAM,GAAG,QAAUoB,GAAgB,CAC/B,GAAIA,EAAO,gBAAkB,SAAU,CACnC,MAAMC,EAAWpB,EAAS,QAAaG,EAAK,OAASgB,EAAO,IAAI,EAC5DC,IACAvB,EAAa,MAAQuB,EACrBtB,EAAa,MAAQ,CACjB,KAAM,GAAGqB,EAAO,MAAM,QAAU,EAAE,KAClC,IAAK,GAAGA,EAAO,MAAM,QAAU,EAAE,KACjC,QAAS,SAEb,WAAW,IAAM,CACbtB,EAAa,MAAQ,IACzB,EAAG,GAAI,EAEf,CACJ,CAAC,CACL,CAAC,EAAE,MAAOwB,GAAU,CAChB,QAAQ,MAAM,WAAYA,CAAK,CACnC,CAAC,CACL,EAEA,OAAA9C,EAAU,IAAM,CACZuC,EAAA,EAEAzC,EAAQ,OAAO,YAAYgC,EAAgB,GAAK,CACpD,CAAC,EAED7B,EAAY,IAAM,CACVH,GACA,cAAcA,CAAK,EAEnB0B,GACAA,EAAM,SAEd,CAAC,UA7RGtB,EAAA,EAAAC,EAuCM,MAvCNC,GAuCM,ylBAlBFE,EAiBM,MAjBNC,GAiBM,CAhBFD,EAA4C,eAAnC,SAAJ,IAAIe,EAAS,MAAM,yBAGbC,EAAA,WAAXnB,EAYM,aAZmB,MAAM,eAAgB,SAAOoB,EAAA,KAAY,IAC9DjB,EAGM,MAHNE,GAGM,CAFFF,EAAiD,OAAjDG,GAAiDC,EAA3BY,EAAA,MAAa,IAAI,KACvChB,EAAsD,OAAtDK,GAAsDD,EAA3BY,EAAA,MAAa,IAAI,OAEhDhB,EAMM,MANNM,GAMM,CALFN,EAAoD,MAApDO,GAAoDH,EAA1BY,EAAA,MAAa,IAAI,KAC3ChB,EAA0D,MAA1DQ,GAA0DJ,EAA5BY,EAAA,MAAa,MAAM,KACjDhB,EAEM,OAFD,MAAKyC,GAAA,CAAC,aAAqBzB,EAAA,MAAa,QAAQ,IAC9CZ,EAAAY,EAAA,MAAa,SAAS,27BC0DjD,MAAM0B,EAAcnD,EAAkBoB,CAAY,EAC5CgC,EAAavB,EAAoC,EAAE,EACnDwB,EAAerD,EAAY,eAAe,EAG1CsD,EAAsBtD,EAAI,CAC9B,CAAE,MAAO,gBAAiB,MAAO,mBACjC,CAAE,MAAO,mBAAoB,MAAO,sBACpC,CAAE,MAAO,gBAAiB,MAAO,sBACjC,CAAE,MAAO,aAAc,MAAO,mBAC9B,CAAE,MAAO,mBAAoB,MAAO,wBACpC,CAAE,MAAO,eAAgB,MAAO,sBAChC,CAAE,MAAO,sBAAuB,MAAO,uBACvC,CAAE,MAAO,MAAO,MAAO,kBAAkB,CAC1C,EAED,IAAIC,EAAuB,KAE3B,MAAMsD,EAAoB,IAAM,OAE9B,MAAM3H,MADU,OACM,UAGhB4H,EAAaxH,EAAkBqH,EAAa,KAAK,EACjDI,IAAmBhG,EAAA6F,EAAoB,MAAM,QAAWI,EAAG,QAAUL,EAAa,KAAK,IAApE,YAAA5F,EAAuE,MAAM,MAAM,KAAK,KAAM,OAEvH0F,EAAY,MAAM,QAAQQ,GAAS,CACjC,GAAI,CAEF,MAAMC,EAAiBjI,EAAWC,EAAW,CAC3C,SAAU+H,EAAM,SAChB,OAAQ,GACT,EAGKvB,EAAe9E,EAAgBqG,EAAM,QAAQ,EAC7CpH,EAAgBP,EAAkB2H,EAAM,QAAQ,EAGtD,IAAIE,EAAiB,GACrB,GAAIF,EAAM,WAAaN,EAAa,MAAO,CACzC,MAAMS,GAAavH,EAAgBiH,GAAc,GAC7CM,EAAY,EACdD,EAAiB,IAAIJ,CAAgB,IAAI,KAAK,IAAIK,CAAS,CAAC,KACnDA,EAAY,EACrBD,EAAiB,IAAIJ,CAAgB,IAAI,KAAK,IAAIK,CAAS,CAAC,KAE5DD,EAAiB,IAAIJ,CAAgB,IAEzC,CAGA,IAAIpB,EAAY,OACZpF,EAAQ,GACR8G,EAEJ,GAAIxC,EAAiB,SAASoC,EAAM,QAAQ,EAC1CtB,EAAY,SACZpF,EAAQ,OACH,CACLA,EAAQmF,EAAa,MACrBC,EAAYpF,EAAQ,MAAQ,OAG5B,MAAM+G,EAAiBpG,GAAqB+F,EAAM,QAAQ,GACtDK,EAAe,gBAAkBA,EAAe,kBAClDD,EAAoB3E,GAAwB4E,EAAgBL,EAAM,QAAQ,EAE9E,CAEAP,EAAWO,EAAM,EAAE,EAAI,CACrB,KAAMC,EACN,OAAQxB,EAAa,OACrB,UAAAC,EACA,MAAApF,EACA,WAAY4G,EACZ,kBAAAE,CAAA,CAEJ,OAASd,EAAO,CACd,QAAQ,MAAM,MAAMU,EAAM,IAAI,SAAUV,CAAK,CAC/C,CACF,CAAC,CACH,EAIA,OAAA9C,EAAU,IAAM,CACdoD,EAAA,EACAtD,EAAQ,OAAO,YAAYsD,EAAmB,GAAI,CACpD,CAAC,EAEDnD,EAAY,IAAM,CACZH,GACF,cAAcA,CAAK,CAEvB,CAAC,UA3LCI,EAAA,EAAAC,EAuEM,MAvENC,GAuEM,CAtEJE,EAUM,MAVNC,GAUM,CATJF,EAAA,KAAAA,EAAA,GAAAC,EAAgB,UAAZ,UAAO,KACXA,EAOM,MAPNE,GAOM,CANJH,EAAA,KAAAA,EAAA,GAAAC,EAAwC,SAAjC,IAAI,iBAAgB,QAAK,QAChCA,EAIS,UAJD,GAAG,qDAAyB4C,EAAY,MAAAY,GAAG,SAAQV,CAAA,UACzDjD,EAES4D,EAAA,KAAAC,EAFYb,EAAA,MAANI,QAAfpD,EAES,UAFkC,IAAKoD,EAAG,MAAQ,MAAOA,EAAG,OAChE7C,EAAA6C,EAAG,KAAK,IAAA9C,EAAA,qBAFqByC,EAAA,KAAY,QAQpD5C,EAyDM,MAzDNK,GAyDM,QAxDJR,EAuDM4D,EAAA,KAAAC,EAtDYhB,EAAA,MAATQ,GAAK,8CADdrD,EAuDM,OArDH,IAAKqD,EAAM,GACZ,MAAM,qBAENlD,EAqBM,MArBNM,GAqBM,CApBJN,EAMM,MANNO,GAMM,CALJP,EAGM,MAHNQ,GAGM,CAFJR,EAA0C,OAA1CS,GAA0CL,EAApB8C,EAAM,IAAI,KAChClD,EAA+C,OAA/CU,GAA+CN,EAApB8C,EAAM,IAAI,OAEvClD,EAAsF,MAAtF2D,GAAsFvD,GAAxDpD,EAAAkG,EAAM,SAAS,MAAK,UAApB,YAAAlG,EAA8B,QAAO,eAGrEgD,EAWM,MAXN4D,GAWM,CAVJ5D,EAAsE,MAAtE6D,GAAsEzD,IAA3C0D,EAAAnB,EAAWO,EAAM,EAAE,IAAnB,YAAAY,EAAsB,OAAI,SACrD9D,EAQM,MARN+D,GAQM,CAPJ/D,EAA0E,OAA1EgE,GAA0E5D,IAA9C6D,EAAAtB,EAAWO,EAAM,EAAE,IAAnB,YAAAe,EAAsB,SAAM,UAC5CC,EAAAvB,EAAWO,EAAM,EAAE,IAAnB,MAAAgB,EAAsB,gBAAlCrE,EAEO,OAFPsE,GAEO/D,GADFgE,EAAAzB,EAAWO,EAAM,EAAE,IAAnB,YAAAkB,EAAsB,UAAU,MAEpBlB,EAAM,WAAaN,EAAA,WAApC/C,EAEO,OAFPwE,GAAgF,WAEhF,mBAMKC,EAAA3B,EAAWO,EAAM,EAAE,IAAnB,MAAAoB,EAAsB,mBAAjC1E,IAAAC,EAYM,MAZN0E,GAYM,aAXJvE,EAAuD,OAAlD,MAAM,gBAAgB,MAAM,eAAc,KAAE,KACjDA,EASM,MATNwE,GASM,EAROC,GAAAC,EAAA/B,EAAWO,EAAM,EAAE,IAAnB,YAAAwB,EAAsB,oBAAtB,MAAAD,EAAyC,UAApD7E,IAAAC,EAGM,MAHN8E,GAGM,CAFJ5E,EAAA,KAAAA,EAAA,GAAAC,EAA2C,OAAtC,MAAM,oBAAmB,UAAO,KACrCA,EAA6F,MAA7F4E,GAA6FxE,GAA1DyE,GAAAC,EAAAnC,EAAWO,EAAM,EAAE,IAAnB,YAAA4B,EAAsB,oBAAtB,YAAAD,EAAyC,QAAQ,kBAE3EE,GAAAC,EAAArC,EAAWO,EAAM,EAAE,IAAnB,YAAA8B,EAAsB,oBAAtB,MAAAD,EAAyC,UAApDnF,IAAAC,EAGM,MAHNoF,GAGM,CAFJlF,EAAA,KAAAA,EAAA,GAAAC,EAA2C,OAAtC,MAAM,oBAAmB,UAAO,KACrCA,EAA6F,MAA7FkF,GAA6F9E,GAA1D+E,GAAAC,EAAAzC,EAAWO,EAAM,EAAE,IAAnB,YAAAkC,EAAsB,oBAAtB,YAAAD,EAAyC,QAAQ,+BAM1FnF,EAUM,MAVNqF,GAUM,CATQC,EAAAxE,CAAA,EAAiB,SAASoC,EAAM,QAAQ,OAApDrD,EAEO,OAFP0F,GAAyF,aAEzF,IACiBC,EAAA7C,EAAWO,EAAM,EAAE,IAAnB,MAAAsC,EAAsB,WAAvC3F,EAEO,OAFP4F,GAA6E,UAE7E,QACA5F,EAEO,OAFP6F,GAA4C,WAE5C,0OC9BV,MAAMC,EAAaC,GAAS,IACD,CAAC,GAAG,IAAI,IAAIhF,EAAc,IAAIiF,GAAWA,EAAQ,QAAQ,CAAC,CAAC,CAErF,EAEKC,EAAyBC,GACtBnF,EAAc,OAAOiF,GAAWA,EAAQ,WAAaE,CAAQ,EAGhEC,EAAmBD,IACiB,CACtC,OAAU,IACV,KAAQ,KACR,OAAU,KACV,MAAS,KACT,KAAQ,IACR,MAAS,KACT,aAAgB,OAEHA,CAAQ,GAAK,mBAxD5BnG,EAAA,EAAAC,EA8BM,MA9BNC,GA8BM,CA7BJC,EAAA,KAAAA,EAAA,GAAAC,EAAmB,UAAf,aAAU,KACdA,EA2BM,MA3BNC,GA2BM,CA1BJD,EAyBQ,QAzBRE,GAyBQ,aAxBNF,EAOQ,cANNA,EAKK,WAJHA,EAAW,UAAP,IAAE,EACNA,EAAW,UAAP,IAAE,EACNA,EAAW,UAAP,IAAE,EACNA,EAAc,UAAV,OAAK,UAGbA,EAeQ,qBAdNH,EAaW4D,EAAA,KAAAC,EAbkBiC,EAAA,MAAZI,iBAA8BA,GAAQ,CACrD/F,EAEK,KAFLG,GAEK,CADHH,EAAmE,KAAnEK,GAAmED,EAAhD4F,EAAgBD,CAAQ,GAAI,IAAC3F,EAAG2F,CAAQ,QAE7DnG,EAAA,IAAAC,EAQK4D,EAAA,KAAAC,EAPeoC,EAAsBC,CAAQ,EAAzCF,QADThG,EAQK,MANF,IAAKgG,EAAQ,UAEd7F,EAA8B,UAAAI,EAAvByF,EAAQ,OAAO,KACtB7F,EAA8B,UAAAI,EAAvByF,EAAQ,OAAO,KACtB7F,EAAkC,UAAAI,EAA3ByF,EAAQ,WAAW,KAC1B7F,EAA2C,WAAvCA,EAAkC,YAAAI,EAAzByF,EAAQ,OAAO,gPCxBxCjG,EAAA,EAAAC,EAiBM,MAjBNC,GAiBM,CAhBJC,EAAA,KAAAA,EAAA,GAAAC,EAAkB,UAAd,YAAS,KAEbD,EAAA,KAAAA,EAAA,GAAAC,EAAqB,UAAjB,eAAY,KAChBA,EAEM,MAFNC,GAEM,CADJD,EAAyC,WAAAI,EAAjCkF,EAAAzE,CAAA,EAAc,UAAU,OAGlCd,EAAA,KAAAA,EAAA,GAAAC,EAAkB,UAAd,YAAS,KACbA,EAEM,MAFNE,GAEM,CADJF,EAA2C,WAAAI,EAAnCkF,EAAAzE,CAAA,EAAc,YAAY,OAGpCd,EAAA,KAAAA,EAAA,GAAAC,EAAqB,UAAjB,eAAY,KAChBA,EAEM,MAFNG,GAEM,CADJH,EAAuC,WAAAI,EAA/BkF,EAAAzE,CAAA,EAAc,QAAQ,sKCflCjB,EAAA,EAAAC,EAwBM,MAxBNC,GAwBM,CAvBJE,EAsBM,MAtBNC,GAsBM,aArBJD,EAEM,OAFD,MAAM,UAAQ,CACjBA,EAAoB,UAAhB,aAAW,QAIjBiG,EAAeC,EAAA,EAGfD,EAAeE,EAAA,EAGfF,EAAcG,EAAA,EAGdpG,EAMM,MANNE,GAMM,CAJJ+F,EAAiBI,EAAA,EAGjBJ,EAAgBK,EAAA,YClBlBC,GAAMC,GAAUC,EAAG,EAGzBF,GAAI,MAAM,MAAM","names":["formatTime","timestamp","options","date","finalOptions","getTimezoneOffset","timezone","now","utc","targetTime","utcTime","getDSTInfo","currentOffset","year","offsets","month","getTimezoneOffsetByDate","minOffset","maxOffset","januaryOffset","julyOffset","standardOffset","isDST","formatTimezoneOffset","offsetInMinutes","offsetHours","offsetMinutes","getTimezoneInfo","isDaylightSavingTime","timeZoneName","_a","part","indicator","getDSTTransitionInfo","currentYear","janDST","julDST","transitions","findDSTTransitions","nextYearTransitions","processTransitions","day","testDate","prevDay","currentDST","prevDST","b","nextTransition","lastTransition","transition","getTransitionType","getAdjustmentDirection","getDSTTransitionTime","baseDate","hour","testTime","prevTime","formatDSTTransitionInfo","formatDateTime","dateStr","timeStr","getAdjustmentText","direction","type","nextInfo","lastInfo","nextType","lastType","timeData","ref","timer","updateTimeDisplay","onMounted","onUnmounted","_openBlock","_createElementBlock","_hoisted_1","_cache","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","WORLD_CLOCKS","TIME_CONCEPTS","CODE_EXAMPLES","NO_DST_TIMEZONES","mapRef","selectedCity","tooltipStyle","chart","cityData","reactive","getCityColor","city","c","updateCityData","index","time","timezoneInfo","dstStatus","dstClass","data","updateMapData","scatterData","initMap","echartsModule","echarts","worldMapData","option","params","cityInfo","error","_normalizeClass","worldClocks","clockTimes","baseTimezone","baseTimezoneOptions","updateWorldClocks","baseOffset","baseTimezoneName","tz","clock","timeInTimezone","baseOffsetText","diffHours","dstTransitionInfo","transitionData","$event","_Fragment","_renderList","_hoisted_11","_hoisted_12","_hoisted_13","_b","_hoisted_14","_hoisted_15","_c","_d","_hoisted_16","_e","_hoisted_17","_f","_hoisted_18","_hoisted_19","_h","_g","_hoisted_20","_hoisted_21","_j","_i","_l","_k","_hoisted_22","_hoisted_23","_n","_m","_hoisted_24","_unref","_hoisted_25","_o","_hoisted_26","_hoisted_27","categories","computed","concept","getConceptsByCategory","category","getCategoryIcon","_createVNode","TimeDisplay","TimezoneMap","WorldClock","ConceptsTable","CodeExamples","app","createApp","App"],"ignoreList":[],"sources":["../../src/utils/timeUtils.ts","../../src/components/TimeDisplay.vue","../../src/data/constants.ts","../../src/components/TimezoneMap.vue","../../src/components/WorldClock.vue","../../src/components/ConceptsTable.vue","../../src/components/CodeExamples.vue","../../src/App.vue","../../src/main.ts"],"sourcesContent":["import type { DSTInfo, FormatOptions, TimezoneInfo } from '@/types/time'\n\n/**\n * 格式化时间显示\n */\nexport const formatTime = (timestamp: number, options: FormatOptions = {}): string => {\n    const date = new Date(timestamp)\n    const defaultOptions: FormatOptions = {\n        locale: 'zh-CN',\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n    }\n\n    const finalOptions = { ...defaultOptions, ...options }\n\n    return date.toLocaleString(finalOptions.locale, {\n        timeZone: finalOptions.timeZone,\n        year: finalOptions.year,\n        month: finalOptions.month,\n        day: finalOptions.day,\n        hour: finalOptions.hour,\n        minute: finalOptions.minute,\n        second: finalOptions.second,\n        hour12: finalOptions.hour12\n    })\n}\n\n/**\n * 计算相对时间（多久之前）\n */\nexport const formatRelativeTime = (timestamp: number): string => {\n    const now = Date.now()\n    const diff = now - timestamp\n\n    if (diff < 60000) return '刚刚'\n    if (diff < 3600000) return `${Math.floor(diff / 60000)}分钟前`\n    if (diff < 86400000) return `${Math.floor(diff / 3600000)}小时前`\n    if (diff < 604800000) return `${Math.floor(diff / 86400000)}天前`\n    if (diff < 2592000000) return `${Math.floor(diff / 604800000)}周前`\n    if (diff < 31536000000) return `${Math.floor(diff / 2592000000)}个月前`\n    return `${Math.floor(diff / 31536000000)}年前`\n}\n\n/**\n * 获取时区偏移（分钟）\n */\nexport const getTimezoneOffset = (timezone: string): number => {\n    const now = new Date()\n    const utc = new Date(now.getTime() + (now.getTimezoneOffset() * 60000))\n    const targetTime = new Date(utc.toLocaleString('en-US', { timeZone: timezone }))\n    const utcTime = new Date(utc.toLocaleString('en-US', { timeZone: 'UTC' }))\n\n    return Math.round((targetTime.getTime() - utcTime.getTime()) / (1000 * 60))\n}\n\n/**\n * 获取夏令时信息\n * 使用更准确的方法检测夏令时状态，符合IANA时区数据库标准\n */\nexport const getDSTInfo = (timezone: string): DSTInfo => {\n    const now = new Date()\n\n    // 获取当前时区的详细信息\n    const currentOffset = getTimezoneOffset(timezone)\n\n    // 获取全年的时区偏移样本来确定标准时间和夏令时\n    const year = now.getFullYear()\n    const months = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] // 12个月\n    const offsets = months.map(month => {\n        const date = new Date(year, month, 15) // 每月15日\n        return getTimezoneOffsetByDate(timezone, date)\n    })\n\n    // 找出最大和最小偏移\n    const minOffset = Math.min(...offsets)\n    const maxOffset = Math.max(...offsets)\n\n    // 如果所有偏移都相同，说明该时区不使用夏令时\n    if (minOffset === maxOffset) {\n        return {\n            isDST: false,\n            standardOffset: currentOffset,\n            currentOffset\n        }\n    }\n\n    // 对于北半球：夏令时偏移 > 标准时间偏移\n    // 对于南半球：夏令时偏移 < 标准时间偏移\n    // 通过检查7月和1月的偏移来判断南北半球\n    const januaryOffset = getTimezoneOffsetByDate(timezone, new Date(year, 0, 15))\n    const julyOffset = getTimezoneOffsetByDate(timezone, new Date(year, 6, 15))\n\n    let standardOffset: number\n    let isDST: boolean\n\n    if (januaryOffset < julyOffset) {\n        // 北半球模式：1月是标准时间，7月是夏令时\n        standardOffset = januaryOffset\n        isDST = currentOffset > standardOffset\n    } else {\n        // 南半球模式：7月是标准时间，1月是夏令时\n        standardOffset = julyOffset\n        isDST = currentOffset < standardOffset\n    }\n\n    return {\n        isDST,\n        standardOffset,\n        currentOffset\n    }\n}\n\n/**\n * 根据特定日期获取时区偏移\n */\nconst getTimezoneOffsetByDate = (timezone: string, date: Date): number => {\n    const utc = new Date(date.getTime() + (date.getTimezoneOffset() * 60000))\n    const targetTime = new Date(utc.toLocaleString('en-US', { timeZone: timezone }))\n    const utcTime = new Date(utc.toLocaleString('en-US', { timeZone: 'UTC' }))\n\n    return Math.round((targetTime.getTime() - utcTime.getTime()) / (1000 * 60))\n}\n\n/**\n * 格式化时区偏移显示\n */\nexport const formatTimezoneOffset = (offsetInMinutes: number): string => {\n    const offsetHours = Math.floor(Math.abs(offsetInMinutes) / 60)\n    const offsetMinutes = Math.abs(offsetInMinutes) % 60\n    const offsetSign = offsetInMinutes >= 0 ? '+' : '-'\n\n    return `UTC${offsetSign}${offsetHours.toString().padStart(2, '0')}:${offsetMinutes.toString().padStart(2, '0')}`\n}\n\n/**\n * 获取时区信息\n */\nexport const getTimezoneInfo = (timezone: string): TimezoneInfo => {\n    const offsetInMinutes = getTimezoneOffset(timezone)\n\n    // 优先使用Intl API检测夏令时，回退到偏移量比较\n    const isDST = isDaylightSavingTime(timezone)\n\n    return {\n        offset: formatTimezoneOffset(offsetInMinutes),\n        isDST,\n        dstStatus: isDST ? '夏令时' : '标准时间'\n    }\n}\n\n/**\n * 获取用户当前时区\n */\nexport const getUserTimezone = (): string => {\n    return Intl.DateTimeFormat().resolvedOptions().timeZone\n}\n\n/**\n * 检查是否支持某个时区\n */\nexport const isTimezoneSupported = (timezone: string): boolean => {\n    try {\n        Intl.DateTimeFormat(undefined, { timeZone: timezone })\n        return true\n    } catch {\n        return false\n    }\n}\n\n/**\n * 使用Intl API更精确地检测夏令时状态\n */\nexport const isDaylightSavingTime = (timezone: string, date: Date = new Date()): boolean => {\n    try {\n        // 使用Intl.DateTimeFormat获取时区的长格式名称\n        const formatter = new Intl.DateTimeFormat('en', {\n            timeZone: timezone,\n            timeZoneName: 'long'\n        })\n\n        const parts = formatter.formatToParts(date)\n        const timeZoneName = parts.find(part => part.type === 'timeZoneName')?.value || ''\n\n        // 检查时区名称中是否包含夏令时指示符\n        const dstIndicators = [\n            'Daylight', 'Summer', 'DST', 'DT',\n            '夏令时', '夏时制', 'Sommerzeit', 'Heure d\\'été'\n        ]\n\n        return dstIndicators.some(indicator =>\n            timeZoneName.includes(indicator)\n        )\n    } catch {\n        // 如果Intl API失败，回退到偏移量比较方法\n        return getDSTInfo(timezone).isDST\n    }\n}\n\n/**\n * 获取时区的标准名称和缩写\n */\nexport const getTimezoneNames = (timezone: string, date: Date = new Date()) => {\n    try {\n        const longFormatter = new Intl.DateTimeFormat('en', {\n            timeZone: timezone,\n            timeZoneName: 'long'\n        })\n\n        const shortFormatter = new Intl.DateTimeFormat('en', {\n            timeZone: timezone,\n            timeZoneName: 'short'\n        })\n\n        const longParts = longFormatter.formatToParts(date)\n        const shortParts = shortFormatter.formatToParts(date)\n\n        return {\n            long: longParts.find(part => part.type === 'timeZoneName')?.value || timezone,\n            short: shortParts.find(part => part.type === 'timeZoneName')?.value || ''\n        }\n    } catch {\n        return {\n            long: timezone,\n            short: ''\n        }\n    }\n}\n\n/**\n * 获取时间戳的各种格式\n */\nexport const getTimestampFormats = (timestamp: number) => {\n    const date = new Date(timestamp)\n\n    return {\n        milliseconds: timestamp,\n        unix: Math.floor(timestamp / 1000),\n        iso8601: date.toISOString(),\n        rfc2822: date.toString(),\n        locale: formatTime(timestamp),\n        utc: date.toISOString().replace('T', ' ').substring(0, 19)\n    }\n}\n\n/**\n * 夏令时转换信息接口\n */\nexport interface DSTTransition {\n    nextTransition: Date | null\n    nextTransitionType: 'spring' | 'fall' | null\n    adjustmentDirection: 'forward' | 'backward' | null\n    lastTransition: Date | null\n    lastTransitionType: 'spring' | 'fall' | null\n    lastAdjustmentDirection: 'forward' | 'backward' | null\n}\n\n/**\n * 获取夏令时转换信息\n * 基于IANA时区数据库标准计算夏令时切换时间\n */\nexport const getDSTTransitionInfo = (timezone: string): DSTTransition => {\n    const now = new Date()\n    const currentYear = now.getFullYear()\n\n    // 检查该时区是否使用夏令时\n    const currentDST = isDaylightSavingTime(timezone, now)\n    const janDST = isDaylightSavingTime(timezone, new Date(currentYear, 0, 15))\n    const julDST = isDaylightSavingTime(timezone, new Date(currentYear, 6, 15))\n\n    // 如果该时区不使用夏令时，返回空信息\n    if (janDST === julDST) {\n        return {\n            nextTransition: null,\n            nextTransitionType: null,\n            adjustmentDirection: null,\n            lastTransition: null,\n            lastTransitionType: null,\n            lastAdjustmentDirection: null\n        }\n    }\n\n    // 寻找今年的夏令时转换点\n    const transitions = findDSTTransitions(timezone, currentYear)\n\n    // 如果没有找到转换点，尝试下一年\n    if (transitions.length === 0) {\n        const nextYearTransitions = findDSTTransitions(timezone, currentYear + 1)\n        return processTransitions(nextYearTransitions, now, timezone)\n    }\n\n    return processTransitions(transitions, now, timezone)\n}\n\n/**\n * 寻找指定年份的夏令时转换点\n */\nfunction findDSTTransitions(timezone: string, year: number): Date[] {\n    const transitions: Date[] = []\n\n    // 检查每个月的第一个和最后一个星期日\n    for (let month = 0; month < 12; month++) {\n        // 检查每个月的每一天来寻找夏令时转换\n        for (let day = 1; day <= 31; day++) {\n            try {\n                const testDate = new Date(year, month, day)\n                if (testDate.getMonth() !== month) break // 月份溢出\n\n                const prevDay = new Date(year, month, day - 1)\n                const currentDST = isDaylightSavingTime(timezone, testDate)\n                const prevDST = isDaylightSavingTime(timezone, prevDay)\n\n                if (currentDST !== prevDST) {\n                    transitions.push(testDate)\n                }\n            } catch (error) {\n                continue\n            }\n        }\n    }\n\n    return transitions.sort((a, b) => a.getTime() - b.getTime())\n}\n\n/**\n * 处理转换点数据\n */\nfunction processTransitions(transitions: Date[], now: Date, timezone: string): DSTTransition {\n    if (transitions.length === 0) {\n        return {\n            nextTransition: null,\n            nextTransitionType: null,\n            adjustmentDirection: null,\n            lastTransition: null,\n            lastTransitionType: null,\n            lastAdjustmentDirection: null\n        }\n    }\n\n    // 寻找下次转换和上次转换\n    let nextTransition: Date | null = null\n    let lastTransition: Date | null = null\n\n    for (const transition of transitions) {\n        if (transition.getTime() > now.getTime() && !nextTransition) {\n            nextTransition = transition\n        }\n        if (transition.getTime() <= now.getTime()) {\n            lastTransition = transition\n        }\n    }\n\n    // 如果今年没有下次转换，寻找明年的第一个转换\n    if (!nextTransition) {\n        const nextYearTransitions = findDSTTransitions(timezone, now.getFullYear() + 1)\n        if (nextYearTransitions.length > 0) {\n            nextTransition = nextYearTransitions[0]\n        }\n    }\n\n    return {\n        nextTransition,\n        nextTransitionType: nextTransition ? getTransitionType(nextTransition) : null,\n        adjustmentDirection: nextTransition ? getAdjustmentDirection(nextTransition) : null,\n        lastTransition,\n        lastTransitionType: lastTransition ? getTransitionType(lastTransition) : null,\n        lastAdjustmentDirection: lastTransition ? getAdjustmentDirection(lastTransition) : null\n    }\n}\n\n/**\n * 获取转换类型（春季或秋季）\n */\nfunction getTransitionType(date: Date): 'spring' | 'fall' {\n    const month = date.getMonth()\n    // 北半球：3-5月为春季转换，9-11月为秋季转换\n    // 南半球相反，但这里简化处理\n    return (month >= 2 && month <= 5) ? 'spring' : 'fall'\n}\n\n/**\n * 获取调整方向\n */\nfunction getAdjustmentDirection(date: Date): 'forward' | 'backward' {\n    const transitionType = getTransitionType(date)\n    // 春季转换通常是向前调整（开始夏令时）\n    // 秋季转换通常是向后调整（结束夏令时）\n    return transitionType === 'spring' ? 'forward' : 'backward'\n}\n\n/**\n * 获取夏令时转换的具体时间（通常是凌晨2点）\n */\nfunction getDSTTransitionTime(timezone: string, date: Date): string {\n    // 大多数地区的夏令时转换发生在凌晨2:00\n    // 这里我们检测具体的转换时间\n    const baseDate = new Date(date.getFullYear(), date.getMonth(), date.getDate())\n\n    // 检查从1:00到3:00之间的转换\n    for (let hour = 1; hour <= 3; hour++) {\n        const testTime = new Date(baseDate.getTime() + hour * 60 * 60 * 1000)\n        const prevTime = new Date(testTime.getTime() - 60 * 60 * 1000)\n\n        if (isDaylightSavingTime(timezone, testTime) !== isDaylightSavingTime(timezone, prevTime)) {\n            return `${hour}:00`\n        }\n    }\n\n    return '2:00' // 默认时间\n}\n\n/**\n * 格式化夏令时转换信息为可读文本\n */\nexport const formatDSTTransitionInfo = (transition: DSTTransition, timezone: string): {\n    nextInfo: string\n    lastInfo: string\n} => {\n    const formatDateTime = (date: Date) => {\n        const dateStr = date.toLocaleDateString('zh-CN', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            weekday: 'long'\n        })\n        const timeStr = getDSTTransitionTime(timezone, date)\n        return `${dateStr} ${timeStr}`\n    }\n\n    const getAdjustmentText = (direction: 'forward' | 'backward' | null, type: 'spring' | 'fall' | null) => {\n        if (direction === 'forward') return '⏰ 时钟从2:00跳到3:00'\n        if (direction === 'backward') return '⏰ 时钟从2:00回到1:00'\n        return ''\n    }\n\n    let nextInfo = ''\n    let lastInfo = ''\n\n    if (transition.nextTransition) {\n        const nextType = transition.nextTransitionType === 'spring' ? '🌞 开始夏令时' : '❄️ 结束夏令时'\n        nextInfo = `📅 ${formatDateTime(transition.nextTransition)}\\n${nextType}\\n${getAdjustmentText(transition.adjustmentDirection, transition.nextTransitionType)}`\n    }\n\n    if (transition.lastTransition) {\n        const lastType = transition.lastTransitionType === 'spring' ? '🌞 开始夏令时' : '❄️ 结束夏令时'\n        lastInfo = `📅 ${formatDateTime(transition.lastTransition)}\\n${lastType}\\n${getAdjustmentText(transition.lastAdjustmentDirection, transition.lastTransitionType)}`\n    }\n\n    return { nextInfo, lastInfo }\n}","<template>\n  <div class=\"demo-section\">\n    <h2>📊 实时时间展示</h2>\n    <div class=\"time-display\">\n      <div class=\"time-card\">\n        <h3>当前时间</h3>\n        <div class=\"value\">{{ timeData.currentTime }}</div>\n        <div class=\"description\">本地时间</div>\n      </div>\n      <div class=\"time-card\">\n        <h3>时间戳</h3>\n        <div class=\"value\">{{ timeData.timestamp }}</div>\n        <div class=\"description\">毫秒时间戳</div>\n      </div>\n      <div class=\"time-card\">\n        <h3>UTC时间</h3>\n        <div class=\"value\">{{ timeData.utcTime }}</div>\n        <div class=\"description\">世界标准时间</div>\n      </div>\n      <div class=\"time-card\">\n        <h3>时区偏移</h3>\n        <div class=\"value\">{{ timeData.timezone }}</div>\n        <div class=\"description\">相对UTC偏移</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted } from 'vue'\nimport type { TimeDisplayData } from '@/types/time'\nimport { formatTime } from '@/utils/timeUtils'\n\nconst timeData = ref<TimeDisplayData>({\n  currentTime: '--',\n  timestamp: 0,\n  utcTime: '--',\n  timezone: '--'\n})\n\nlet timer: number | null = null\n\nconst updateTimeDisplay = () => {\n  const now = new Date()\n  const timestamp = now.getTime()\n\n  timeData.value = {\n    currentTime: formatTime(timestamp),\n    timestamp,\n    utcTime: now.toISOString().replace('T', ' ').substring(0, 19),\n    timezone: `UTC${(-now.getTimezoneOffset() / 60) >= 0 ? '+' : ''}${-now.getTimezoneOffset() / 60}`\n  }\n}\n\nonMounted(() => {\n  updateTimeDisplay()\n  timer = window.setInterval(updateTimeDisplay, 1000)\n})\n\nonUnmounted(() => {\n  if (timer) {\n    clearInterval(timer)\n  }\n})\n</script>\n\n<style scoped>\n.demo-section {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  border: 1px solid #e9ecef;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n}\n\n.demo-section h2 {\n  color: #2c3e50;\n  margin-bottom: 16px;\n  font-size: 1.3em;\n  font-weight: 600;\n  margin-top: 0;\n}\n\n.time-display {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 12px;\n}\n\n.time-card {\n  background: #f8f9fa;\n  color: #2c3e50;\n  padding: 16px;\n  border-radius: 6px;\n  text-align: center;\n  border: 1px solid #e9ecef;\n  transition: all 0.2s ease;\n}\n\n.time-card:hover {\n  background: #f1f3f5;\n  transform: translateY(-1px);\n}\n\n.time-card h3 {\n  margin-bottom: 8px;\n  font-size: 0.9em;\n  color: #6c757d;\n  font-weight: 500;\n}\n\n.time-card .value {\n  font-size: 1.2em;\n  font-weight: 600;\n  margin-bottom: 4px;\n  color: #2c3e50;\n  font-family: 'Consolas', 'Monaco', monospace;\n}\n\n.time-card .description {\n  font-size: 0.8em;\n  color: #6c757d;\n}\n\n@media (max-width: 768px) {\n  .time-display {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 8px;\n  }\n\n  .demo-section {\n    padding: 16px;\n  }\n}\n</style>","import type { TimeConcept, WorldClock } from '@/types/time'\n\n// 世界时钟数据 (包含地理坐标)\nexport const WORLD_CLOCKS: WorldClock[] = [\n    { id: 'beijing', timezone: 'Asia/Shanghai', name: '北京', flag: '🇨🇳', coordinates: [116.4074, 39.9042] },\n    { id: 'newyork', timezone: 'America/New_York', name: '纽约', flag: '🇺🇸', coordinates: [-74.0060, 40.7128] },\n    { id: 'london', timezone: 'Europe/London', name: '伦敦', flag: '🇬🇧', coordinates: [-0.1276, 51.5074] },\n    { id: 'paris', timezone: 'Europe/Paris', name: '巴黎', flag: '🇫🇷', coordinates: [2.3522, 48.8566] },\n    { id: 'tokyo', timezone: 'Asia/Tokyo', name: '东京', flag: '🇯🇵', coordinates: [139.6917, 35.6895] },\n    { id: 'sydney', timezone: 'Australia/Sydney', name: '悉尼', flag: '🇦🇺', coordinates: [151.2093, -33.8688] },\n    { id: 'losangeles', timezone: 'America/Los_Angeles', name: '洛杉矶', flag: '🇺🇸', coordinates: [-118.2437, 34.0522] },\n    { id: 'moscow', timezone: 'Europe/Moscow', name: '莫斯科', flag: '🇷🇺', coordinates: [37.6173, 55.7558] },\n    { id: 'dubai', timezone: 'Asia/Dubai', name: '迪拜', flag: '🇦🇪', coordinates: [55.2708, 25.2048] },\n    { id: 'saopaulo', timezone: 'America/Sao_Paulo', name: '圣保罗', flag: '🇧🇷', coordinates: [-46.6333, -23.5505] },\n    { id: 'phoenix', timezone: 'America/Phoenix', name: '凤凰城', flag: '🇺🇸', coordinates: [-112.0740, 33.4484] },\n    { id: 'mumbai', timezone: 'Asia/Kolkata', name: '孟买', flag: '🇮🇳', coordinates: [72.8777, 19.0760] }\n]\n\n// 时间概念数据\nexport const TIME_CONCEPTS: TimeConcept[] = [\n    // 基础时间概念\n    {\n        concept: '时间戳',\n        english: 'Timestamp',\n        description: '从1970年1月1日00:00:00 UTC开始的毫秒数',\n        example: '1672531200000',\n        category: '基础时间概念'\n    },\n    {\n        concept: '纪元时间',\n        english: 'Epoch Time',\n        description: '时间戳的起点，即Unix时间戳的零点',\n        example: '1970-01-01 00:00:00 UTC',\n        category: '基础时间概念'\n    },\n    {\n        concept: '世界协调时',\n        english: 'UTC',\n        description: '全球统一的时间标准，不受时区影响',\n        example: '2025-01-01 00:00:00 UTC',\n        category: '基础时间概念'\n    },\n    {\n        concept: '本地时间',\n        english: 'Local Time',\n        description: '用户所在地区的时间',\n        example: '2025-01-01 08:00:00 (北京时间)',\n        category: '基础时间概念'\n    },\n\n    // 时区相关\n    {\n        concept: '时区',\n        english: 'Timezone',\n        description: '地球上使用相同时间的区域',\n        example: 'Asia/Shanghai, America/New_York',\n        category: '时区相关'\n    },\n    {\n        concept: '时区偏移',\n        english: 'Timezone Offset',\n        description: '相对于UTC的时差',\n        example: '+08:00, -05:00',\n        category: '时区相关'\n    },\n    {\n        concept: '夏令时',\n        english: 'Daylight Saving Time',\n        description: '某些地区夏季将时钟调快1小时',\n        example: '美国、欧洲等地区使用',\n        category: '时区相关'\n    },\n    {\n        concept: '时区名称',\n        english: 'Timezone Name',\n        description: '时区的文本表示 | 字段模式: z(PST), zzzz(Pacific Standard Time)',\n        example: 'z=CST, zzzz=中国标准时间',\n        category: '时区相关'\n    },\n    {\n        concept: '时区偏移格式',\n        english: 'Timezone Offset Format',\n        description: '偏移量格式 | 字段模式: Z(+0800), ZZZZZ(+08:00), O(GMT+8)',\n        example: 'Z=+0800, ZZZZZ=+08:00, O=GMT+8',\n        category: '时区相关'\n    },\n    {\n        concept: '通用时区',\n        english: 'Generic Timezone',\n        description: '通用时区表示 | 字段模式: v(PT), vvvv(Pacific Time)',\n        example: 'v=CT, vvvv=中国时间',\n        category: '时区相关'\n    },\n    {\n        concept: '时区标识符',\n        english: 'Timezone ID',\n        description: '时区标识符 | 字段模式: VV(America/New_York), VVVV(New York Time)',\n        example: 'VV=Asia/Shanghai, VVVV=上海时间',\n        category: '时区相关'\n    },\n\n    // 日期时间组件 (基于Unicode LDML标准)\n    {\n        concept: '年份',\n        english: 'Year',\n        description: '公历年份 | 字段模式: y(2025), yy(25), yyyy(2025)',\n        example: 'y=2025, yy=25, yyyy=2025',\n        category: '日期时间组件'\n    },\n    {\n        concept: '月份',\n        english: 'Month',\n        description: '月份表示 | 字段模式: M(1), MM(01), MMM(Jan), MMMM(January)',\n        example: 'M=1, MM=01, MMM=一月, MMMM=一月',\n        category: '日期时间组件'\n    },\n    {\n        concept: '日期',\n        english: 'Day of Month',\n        description: '月中的日 | 字段模式: d(1), dd(01)',\n        example: 'd=1, dd=01',\n        category: '日期时间组件'\n    },\n    {\n        concept: '星期',\n        english: 'Day of Week',\n        description: '星期表示 | 字段模式: E(Mon), EEE(Mon), EEEE(Monday)',\n        example: 'E=周一, EEE=周一, EEEE=星期一',\n        category: '日期时间组件'\n    },\n    {\n        concept: '小时(24制)',\n        english: 'Hour (24h)',\n        description: '24小时制 | 字段模式: H(0-23), HH(00-23)',\n        example: 'H=9, HH=09 (上午), H=21, HH=21 (晚上)',\n        category: '日期时间组件'\n    },\n    {\n        concept: '小时(12制)',\n        english: 'Hour (12h)',\n        description: '12小时制 | 字段模式: h(1-12), hh(01-12) + a(AM/PM)',\n        example: 'h=9, hh=09 + AM, h=9, hh=09 + PM',\n        category: '日期时间组件'\n    },\n    {\n        concept: '分钟',\n        english: 'Minute',\n        description: '分钟表示 | 字段模式: m(0), mm(00)',\n        example: 'm=5, mm=05',\n        category: '日期时间组件'\n    },\n    {\n        concept: '秒',\n        english: 'Second',\n        description: '秒表示 | 字段模式: s(0), ss(00)',\n        example: 's=7, ss=07',\n        category: '日期时间组件'\n    },\n    {\n        concept: '毫秒/分数秒',\n        english: 'Fractional Second',\n        description: '分数秒表示 | 字段模式: S(0), SS(00), SSS(000)',\n        example: 'S=1, SS=12, SSS=123',\n        category: '日期时间组件'\n    },\n    {\n        concept: '上午/下午',\n        english: 'AM/PM Marker',\n        description: '上下午标记 | 字段模式: a(AM/PM)',\n        example: 'a=AM(上午), a=PM(下午)',\n        category: '日期时间组件'\n    },\n\n    // 格式化模式 (基于Unicode LDML标准)\n    {\n        concept: '日期模式',\n        english: 'Date Pattern',\n        description: '完整日期格式 | 模式: yyyy-MM-dd, yyyy年M月d日',\n        example: '2025-01-15, 2025年1月15日',\n        category: '格式化模式'\n    },\n    {\n        concept: '时间模式',\n        english: 'Time Pattern',\n        description: '时间格式 | 模式: HH:mm:ss, ah:mm:ss',\n        example: '14:30:00, 下午2:30:00',\n        category: '格式化模式'\n    },\n    {\n        concept: '日期时间模式',\n        english: 'DateTime Pattern',\n        description: '完整日期时间 | 模式: yyyy-MM-dd HH:mm:ss',\n        example: '2025-01-15 14:30:00',\n        category: '格式化模式'\n    },\n    {\n        concept: '骨架模式',\n        english: 'Skeleton Pattern',\n        description: 'Unicode标准的灵活模式 | 骨架: yMMMd, Hms',\n        example: 'yMMMd→2025年1月15日, Hms→14:30:00',\n        category: '格式化模式'\n    },\n\n    // 相对时间\n    {\n        concept: '相对时间',\n        english: 'Relative Time',\n        description: '相对于当前时间的描述',\n        example: '2分钟前, 明天, 下周',\n        category: '相对时间'\n    },\n    {\n        concept: '持续时间',\n        english: 'Duration',\n        description: '时间间隔的长度',\n        example: '2小时30分钟, 3天',\n        category: '相对时间'\n    },\n    {\n        concept: '时间差',\n        english: 'Time Difference',\n        description: '两个时间点之间的差值',\n        example: '时间A - 时间B = 2小时',\n        category: '相对时间'\n    },\n    {\n        concept: '时间间隔',\n        english: 'Time Interval',\n        description: '两个时间点之间的范围表示',\n        example: '2025-01-15 ~ 2025-01-20',\n        category: '相对时间'\n    },\n\n    // 国际化概念 (基于Unicode LDML标准)\n    {\n        concept: '区域设置',\n        english: 'Locale',\n        description: '语言和地区的组合标识 | 格式: language-region',\n        example: 'zh-CN, en-US, ja-JP',\n        category: '国际化概念'\n    },\n    {\n        concept: '日历系统',\n        english: 'Calendar System',\n        description: '不同的日历计算方式',\n        example: 'gregorian(公历), chinese(农历), islamic(伊斯兰历)',\n        category: '国际化概念'\n    },\n    {\n        concept: '纪元',\n        english: 'Era',\n        description: '历史年代标记 | 字段模式: G(AD), GGGG(Anno Domini)',\n        example: 'G=公元, GGGG=公元',\n        category: '国际化概念'\n    },\n    {\n        concept: '周数',\n        english: 'Week of Year',\n        description: '一年中的第几周 | 字段模式: w(1-53), W(1-5)',\n        example: 'w=3(年中第3周), W=3(月中第3周)',\n        category: '国际化概念'\n    },\n\n    // JavaScript特有\n    {\n        concept: 'Date对象',\n        english: 'Date Object',\n        description: 'JS中表示时间的对象',\n        example: 'new Date()',\n        category: 'JavaScript特有'\n    },\n    {\n        concept: '时间解析',\n        english: 'Date Parsing',\n        description: '将字符串转换为Date对象',\n        example: \"new Date('2025-01-01')\",\n        category: 'JavaScript特有'\n    },\n    {\n        concept: '时间格式化',\n        english: 'Date Formatting',\n        description: '将Date对象转换为字符串',\n        example: 'date.toLocaleString()',\n        category: 'JavaScript特有'\n    }\n]\n\n// 代码示例\nexport const CODE_EXAMPLES = {\n    timeFormat: `// 获取当前时间戳\nconst timestamp = Date.now()\nconsole.log('当前时间戳:', timestamp)\n\n// 格式化时间显示\nconst formatTime = (timestamp) => {\n    const date = new Date(timestamp)\n    return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n    })\n}`,\n\n    relativeTime: `// 计算\"多久之前\"\nconst formatRelativeTime = (timestamp) => {\n    const now = Date.now()\n    const diff = now - timestamp\n\n    if (diff < 60000) return '刚刚'\n    if (diff < 3600000) return \\`\\${Math.floor(diff / 60000)}分钟前\\`\n    if (diff < 86400000) return \\`\\${Math.floor(diff / 3600000)}小时前\\`\n    return \\`\\${Math.floor(diff / 86400000)}天前\\`\n}`,\n\n    timezone: `// 获取用户时区\nconst userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone\nconsole.log('用户时区:', userTimezone)\n\n// 转换为指定时区\nconst convertToTimezone = (timestamp, timezone) => {\n    const date = new Date(timestamp)\n    return date.toLocaleString('zh-CN', {\n        timeZone: timezone,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n    })\n}\n\n// 世界时钟示例\nconst worldClocks = [\n    { name: '北京', timezone: 'Asia/Shanghai' },\n    { name: '纽约', timezone: 'America/New_York' },\n    { name: '伦敦', timezone: 'Europe/London' },\n    { name: '悉尼', timezone: 'Australia/Sydney' }\n]`\n}\n\n// 不使用夏令时的时区 (根据IANA时区数据库)\nexport const NO_DST_TIMEZONES = [\n    'America/Phoenix',      // 亚利桑那州 (除纳瓦霍族保留地)\n    'Asia/Kolkata',         // 印度\n    'Asia/Shanghai',        // 中国\n    'Asia/Tokyo',           // 日本\n    'Asia/Dubai',           // 阿联酋\n    'Europe/Moscow',        // 俄罗斯 (2014年起不再使用夏令时)\n    'America/Caracas',      // 委内瑞拉\n    'America/La_Paz',       // 玻利维亚\n    'America/Bogota',       // 哥伦比亚\n    'America/Guatemala',    // 危地马拉\n    'America/Jamaica',      // 牙买加\n    'America/Panama',       // 巴拿马\n    'America/Sao_Paulo',    // 巴西 (2019年起不再使用夏令时)\n    'Asia/Seoul',           // 韩国\n    'Asia/Taipei',          // 台湾\n    'Asia/Hong_Kong',       // 香港\n    'Asia/Singapore',       // 新加坡\n    'Asia/Bangkok',         // 泰国\n    'Asia/Jakarta',         // 印度尼西亚\n    'Asia/Manila',          // 菲律宾\n    'Africa/Cairo',         // 埃及 (目前不使用)\n    'Africa/Johannesburg'   // 南非\n]","<template>\n    <div class=\"demo-section\">\n        <div class=\"section-header\">\n            <h2>🗺️ 时区地图</h2>\n            <div class=\"map-controls\">\n                <div class=\"legend\">\n                    <span class=\"legend-item\">\n                        <div class=\"legend-dot standard\"></div>\n                        <span>标准时间</span>\n                    </span>\n                    <span class=\"legend-item\">\n                        <div class=\"legend-dot dst\"></div>\n                        <span>夏令时</span>\n                    </span>\n                    <span class=\"legend-item\">\n                        <div class=\"legend-dot no-dst\"></div>\n                        <span>全年标准时间</span>\n                    </span>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"map-container\">\n            <div ref=\"mapRef\" class=\"echarts-map\"></div>\n\n            <!-- 点击提示框 -->\n            <div v-if=\"selectedCity\" class=\"city-tooltip\" :style=\"tooltipStyle\">\n                <div class=\"tooltip-header\">\n                    <span class=\"flag\">{{ selectedCity.flag }}</span>\n                    <span class=\"city-name\">{{ selectedCity.name }}</span>\n                </div>\n                <div class=\"tooltip-content\">\n                    <div class=\"time-info\">{{ selectedCity.time }}</div>\n                    <div class=\"timezone-info\">{{ selectedCity.offset }}</div>\n                    <div class=\"dst-status\" :class=\"selectedCity.dstClass\">\n                        {{ selectedCity.dstStatus }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted, reactive } from 'vue'\nimport { WORLD_CLOCKS, NO_DST_TIMEZONES } from '@/data/constants'\nimport { formatTime, getTimezoneInfo } from '@/utils/timeUtils'\nimport worldMapData from '@/data/world.json'\n\n// ECharts 类型声明\ndeclare global {\n    interface Window {\n        echarts: any\n    }\n}\n\ninterface CityData {\n    id: string\n    name: string\n    flag: string\n    coordinates: [number, number]\n    time: string\n    offset: string\n    isDST: boolean\n    dstStatus: string\n    dstClass: string\n}\n\nconst mapRef = ref<HTMLElement>()\nconst selectedCity = ref<CityData | null>(null)\nconst tooltipStyle = ref<Record<string, string>>({})\nlet chart: any = null\nlet timer: number | null = null\n\nconst cityData = reactive<CityData[]>([])\n\n// 获取城市颜色\nconst getCityColor = (city: CityData): string => {\n    if (NO_DST_TIMEZONES.includes(WORLD_CLOCKS.find(c => c.id === city.id)?.timezone || '')) {\n        return '#9e9e9e' // 灰色 - 全年标准时间\n    }\n    return city.isDST ? '#ffc107' : '#2196f3' // 黄色 - 夏令时，蓝色 - 标准时间\n}\n\n// 更新城市时间数据\nconst updateCityData = () => {\n    const now = Date.now()\n\n    WORLD_CLOCKS.forEach((city, index) => {\n        if (!city.coordinates) return\n\n        const time = formatTime(now, {\n            timeZone: city.timezone,\n            hour12: false,\n            hour: '2-digit',\n            minute: '2-digit'\n        })\n\n        const timezoneInfo = getTimezoneInfo(city.timezone)\n\n        let dstStatus = '标准时间'\n        let dstClass = 'standard'\n\n        if (NO_DST_TIMEZONES.includes(city.timezone)) {\n            dstStatus = '全年标准时间'\n            dstClass = 'no-dst'\n        } else if (timezoneInfo.isDST) {\n            dstStatus = '夏令时'\n            dstClass = 'dst'\n        }\n\n        const data: CityData = {\n            id: city.id,\n            name: city.name,\n            flag: city.flag,\n            coordinates: city.coordinates,\n            time,\n            offset: timezoneInfo.offset,\n            isDST: timezoneInfo.isDST,\n            dstStatus,\n            dstClass\n        }\n\n        if (cityData[index]) {\n            Object.assign(cityData[index], data)\n        } else {\n            cityData.push(data)\n        }\n    })\n\n    updateMapData()\n}\n\n// 更新地图数据\nconst updateMapData = () => {\n    if (!chart) return\n\n    const scatterData = cityData.map(city => ({\n        name: city.name,\n        value: [...city.coordinates, city.time],\n        symbol: 'pin',\n        symbolSize: [28, 38],\n        itemStyle: {\n            color: getCityColor(city),\n            borderColor: '#fff',\n            borderWidth: 2,\n            shadowBlur: 4,\n            shadowColor: 'rgba(0, 0, 0, 0.3)'\n        },\n        label: {\n            show: true,\n            formatter: `{flag|${city.flag}} {time|${city.time}}`,\n            position: 'top',\n            distance: 18,\n            rich: {\n                flag: {\n                    fontSize: 16,\n                    padding: [3, 5]\n                },\n                time: {\n                    fontSize: 12,\n                    color: '#333',\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                    padding: [4, 8],\n                    borderRadius: 4,\n                    borderColor: getCityColor(city),\n                    borderWidth: 2,\n                    shadowBlur: 3,\n                    shadowColor: 'rgba(0, 0, 0, 0.2)'\n                }\n            }\n        },\n        emphasis: {\n            symbolSize: [32, 42],\n            itemStyle: {\n                shadowBlur: 6,\n                shadowColor: 'rgba(0, 0, 0, 0.4)'\n            }\n        }\n    }))\n\n    chart.setOption({\n        series: [{\n            type: 'scatter',\n            coordinateSystem: 'geo',\n            data: scatterData\n        }]\n    })\n}\n\n// 初始化地图\nconst initMap = () => {\n    if (!mapRef.value) return\n\n    import('echarts').then((echartsModule) => {\n        const echarts = (echartsModule as any).default || echartsModule\n\n        chart = echarts.init(mapRef.value!)\n\n        // 注册全量世界地图数据\n        echarts.registerMap('world', worldMapData)\n\n        const option = {\n            backgroundColor: '#f0f7ff',\n            title: {\n                text: '🗺️ 世界时区地图',\n                left: 'center',\n                top: 15,\n                textStyle: {\n                    color: '#2c3e50',\n                    fontSize: 16,\n                    fontWeight: 'bold'\n                }\n            },\n            geo: {\n                map: 'world',\n                roam: true,\n                zoom: 1.1,\n                center: [15, 25],\n                itemStyle: {\n                    areaColor: '#e8f4fd',\n                    borderColor: '#b3d9ff',\n                    borderWidth: 0.8\n                },\n                emphasis: {\n                    itemStyle: {\n                        areaColor: '#cce7f0',\n                        borderColor: '#81c4ff'\n                    }\n                },\n                select: {\n                    itemStyle: {\n                        areaColor: '#a6d4fa'\n                    }\n                }\n            },\n            series: [{\n                type: 'scatter',\n                coordinateSystem: 'geo',\n                data: [],\n                symbolSize: 20,\n                symbol: 'pin',\n                emphasis: {\n                    symbolSize: 25\n                }\n            }]\n        }\n\n        chart.setOption(option)\n        updateCityData()\n\n        // 监听点击事件\n        chart.on('click', (params: any) => {\n            if (params.componentType === 'series') {\n                const cityInfo = cityData.find(city => city.name === params.name)\n                if (cityInfo) {\n                    selectedCity.value = cityInfo\n                    tooltipStyle.value = {\n                        left: `${params.event.offsetX + 15}px`,\n                        top: `${params.event.offsetY - 10}px`,\n                        display: 'block'\n                    }\n                    setTimeout(() => {\n                        selectedCity.value = null\n                    }, 3000)\n                }\n            }\n        })\n    }).catch((error) => {\n        console.error('地图初始化失败:', error)\n    })\n}\n\nonMounted(() => {\n    initMap()\n    // 每分钟更新一次时间\n    timer = window.setInterval(updateCityData, 60000)\n})\n\nonUnmounted(() => {\n    if (timer) {\n        clearInterval(timer)\n    }\n    if (chart) {\n        chart.dispose()\n    }\n})\n</script>\n\n<style scoped>\n.demo-section {\n    background: white;\n    padding: 20px;\n    border-radius: 8px;\n    border: 1px solid #e9ecef;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n    margin-bottom: 20px;\n}\n\n.section-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 16px;\n}\n\n.section-header h2 {\n    color: #2c3e50;\n    margin: 0;\n    font-size: 1.3em;\n    font-weight: 600;\n}\n\n.map-controls {\n    display: flex;\n    align-items: center;\n    gap: 20px;\n}\n\n.legend {\n    display: flex;\n    gap: 16px;\n    align-items: center;\n}\n\n.legend-item {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    font-size: 0.85em;\n    color: #6c757d;\n}\n\n.legend-dot {\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    border: 2px solid #fff;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n.legend-dot.standard {\n    background: #2196f3;\n}\n\n.legend-dot.dst {\n    background: #ffc107;\n}\n\n.legend-dot.no-dst {\n    background: #9e9e9e;\n}\n\n.map-container {\n    position: relative;\n    width: 100%;\n    height: 500px;\n    border-radius: 8px;\n    overflow: hidden;\n    border: 1px solid #e9ecef;\n    background: #f0f7ff;\n    margin-top: 16px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.echarts-map {\n    width: 100%;\n    height: 100%;\n}\n\n.city-tooltip {\n    position: absolute;\n    background: white;\n    border: 1px solid #dee2e6;\n    border-radius: 8px;\n    padding: 12px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    z-index: 1000;\n    min-width: 200px;\n    display: none;\n}\n\n.tooltip-header {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    margin-bottom: 8px;\n    padding-bottom: 8px;\n    border-bottom: 1px solid #f1f3f5;\n}\n\n.tooltip-header .flag {\n    font-size: 1.2em;\n}\n\n.city-name {\n    font-weight: 600;\n    color: #2c3e50;\n}\n\n.tooltip-content {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n}\n\n.time-info {\n    font-size: 1.1em;\n    font-weight: 600;\n    color: #2c3e50;\n}\n\n.timezone-info {\n    font-size: 0.9em;\n    color: #6c757d;\n}\n\n.dst-status {\n    font-size: 0.85em;\n    padding: 2px 6px;\n    border-radius: 3px;\n    width: fit-content;\n}\n\n.dst-status.standard {\n    background: #e3f2fd;\n    color: #1976d2;\n}\n\n.dst-status.dst {\n    background: #fff8e1;\n    color: #f57c00;\n}\n\n.dst-status.no-dst {\n    background: #f5f5f5;\n    color: #616161;\n}\n\n@media (max-width: 768px) {\n    .demo-section {\n        padding: 16px;\n    }\n\n    .section-header {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 12px;\n    }\n\n    .legend {\n        flex-wrap: wrap;\n        gap: 12px;\n    }\n\n    .map-container {\n        height: 380px;\n    }\n\n    .city-tooltip {\n        min-width: 180px;\n        padding: 10px;\n    }\n}\n</style>","<template>\n  <div class=\"demo-section\">\n    <div class=\"section-header\">\n      <h2>🌍 世界时钟</h2>\n      <div class=\"timezone-selector\">\n        <label for=\"base-timezone\">基准时区：</label>\n        <select id=\"base-timezone\" v-model=\"baseTimezone\" @change=\"updateWorldClocks\">\n          <option v-for=\"tz in baseTimezoneOptions\" :key=\"tz.value\" :value=\"tz.value\">\n            {{ tz.label }}\n          </option>\n        </select>\n      </div>\n    </div>\n\n    <div class=\"world-clock-grid\">\n      <div\n        v-for=\"clock in worldClocks\"\n        :key=\"clock.id\"\n        class=\"world-clock-card\"\n      >\n        <div class=\"card-content\">\n          <div class=\"clock-header\">\n            <div class=\"city-info\">\n              <span class=\"flag\">{{ clock.flag }}</span>\n              <span class=\"city-name\">{{ clock.name }}</span>\n            </div>\n            <div class=\"timezone-name\">{{ clock.timezone.split('/')[1]?.replace('_', ' ') }}</div>\n          </div>\n\n          <div class=\"time-section\">\n            <div class=\"time-value\">{{ clockTimes[clock.id]?.time || '--' }}</div>\n            <div class=\"time-meta\">\n              <span class=\"offset-utc\">{{ clockTimes[clock.id]?.offset || '--' }}</span>\n              <span v-if=\"clockTimes[clock.id]?.baseOffset\" class=\"offset-base\">\n                {{ clockTimes[clock.id]?.baseOffset }}\n              </span>\n              <span v-else-if=\"clock.timezone === baseTimezone\" class=\"offset-base-reference\">\n                🎯 基准时区\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <!-- 夏令时转换信息指示器 -->\n        <div v-if=\"clockTimes[clock.id]?.dstTransitionInfo\" class=\"dst-transition-indicator\">\n          <div class=\"dst-info-icon\" title=\"点击查看夏令时转换信息\">ℹ️</div>\n          <div class=\"dst-transition-tooltip\">\n            <div v-if=\"clockTimes[clock.id]?.dstTransitionInfo?.nextInfo\" class=\"transition-item next-transition\">\n              <div class=\"transition-label\">🔜 下次转换</div>\n              <div class=\"transition-details\">{{ clockTimes[clock.id]?.dstTransitionInfo?.nextInfo }}</div>\n            </div>\n            <div v-if=\"clockTimes[clock.id]?.dstTransitionInfo?.lastInfo\" class=\"transition-item last-transition\">\n              <div class=\"transition-label\">📋 上次转换</div>\n              <div class=\"transition-details\">{{ clockTimes[clock.id]?.dstTransitionInfo?.lastInfo }}</div>\n            </div>\n          </div>\n        </div>\n\n        <!-- 状态徽章 - 移到底部横条 -->\n        <div class=\"status-badge-bottom\">\n          <span v-if=\"NO_DST_TIMEZONES.includes(clock.timezone)\" class=\"no-dst-badge bottom-badge\">\n            🏠 全年标准时间\n          </span>\n          <span v-else-if=\"clockTimes[clock.id]?.isDST\" class=\"dst-badge bottom-badge\">\n            🌞 夏令时\n          </span>\n          <span v-else class=\"std-badge bottom-badge\">\n            ❄️ 标准时间\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive, onMounted, onUnmounted } from 'vue'\nimport type { WorldClock } from '@/types/time'\nimport { WORLD_CLOCKS, NO_DST_TIMEZONES } from '@/data/constants'\nimport { formatTime, getTimezoneInfo, getTimezoneOffset, getDSTTransitionInfo, formatDSTTransitionInfo } from '@/utils/timeUtils'\n\ninterface ClockTime {\n  time: string\n  offset: string\n  dstStatus: string\n  isDST: boolean\n  baseOffset?: string\n  dstTransitionInfo?: {\n    nextInfo: string\n    lastInfo: string\n  }\n}\n\nconst worldClocks = ref<WorldClock[]>(WORLD_CLOCKS)\nconst clockTimes = reactive<Record<string, ClockTime>>({})\nconst baseTimezone = ref<string>('Asia/Shanghai')\n\n// 基准时区选项\nconst baseTimezoneOptions = ref([\n  { value: 'Asia/Shanghai', label: '🇨🇳 北京 (UTC+8)' },\n  { value: 'America/New_York', label: '🇺🇸 纽约 (UTC-5/-4)' },\n  { value: 'Europe/London', label: '🇬🇧 伦敦 (UTC+0/+1)' },\n  { value: 'Asia/Tokyo', label: '🇯🇵 东京 (UTC+9)' },\n  { value: 'Australia/Sydney', label: '🇦🇺 悉尼 (UTC+10/+11)' },\n  { value: 'Europe/Paris', label: '🇫🇷 巴黎 (UTC+1/+2)' },\n  { value: 'America/Los_Angeles', label: '🇺🇸 洛杉矶 (UTC-8/-7)' },\n  { value: 'UTC', label: '🌍 UTC (世界标准时间)' }\n])\n\nlet timer: number | null = null\n\nconst updateWorldClocks = () => {\n  const now = new Date()\n  const timestamp = now.getTime()\n\n  // 获取基准时区偏移\n  const baseOffset = getTimezoneOffset(baseTimezone.value)\n  const baseTimezoneName = baseTimezoneOptions.value.find(tz => tz.value === baseTimezone.value)?.label.split(' ')[1] || '基准时区'\n\n  worldClocks.value.forEach(clock => {\n    try {\n      // 获取指定时区的时间\n      const timeInTimezone = formatTime(timestamp, {\n        timeZone: clock.timezone,\n        hour12: false\n      })\n\n      // 获取时区信息\n      const timezoneInfo = getTimezoneInfo(clock.timezone)\n      const currentOffset = getTimezoneOffset(clock.timezone)\n\n      // 计算与基准时区的偏移\n      let baseOffsetText = ''\n      if (clock.timezone !== baseTimezone.value) {\n        const diffHours = (currentOffset - baseOffset) / 60\n        if (diffHours > 0) {\n          baseOffsetText = `比${baseTimezoneName}快${Math.abs(diffHours)}小时`\n        } else if (diffHours < 0) {\n          baseOffsetText = `比${baseTimezoneName}慢${Math.abs(diffHours)}小时`\n        } else {\n          baseOffsetText = `与${baseTimezoneName}同步`\n        }\n      }\n\n            // 根据时区是否使用夏令时来设置状态\n      let dstStatus = '标准时间'\n      let isDST = false\n      let dstTransitionInfo = undefined\n\n      if (NO_DST_TIMEZONES.includes(clock.timezone)) {\n        dstStatus = '全年标准时间'\n        isDST = false\n      } else {\n        isDST = timezoneInfo.isDST\n        dstStatus = isDST ? '夏令时' : '标准时间'\n\n        // 获取夏令时转换信息\n        const transitionData = getDSTTransitionInfo(clock.timezone)\n        if (transitionData.nextTransition || transitionData.lastTransition) {\n          dstTransitionInfo = formatDSTTransitionInfo(transitionData, clock.timezone)\n        }\n      }\n\n      clockTimes[clock.id] = {\n        time: timeInTimezone,\n        offset: timezoneInfo.offset,\n        dstStatus,\n        isDST,\n        baseOffset: baseOffsetText,\n        dstTransitionInfo\n      }\n    } catch (error) {\n      console.error(`更新 ${clock.name} 时间失败:`, error)\n    }\n  })\n}\n\n// 移除了getDSTClass函数，现在在模板中直接处理夏令时状态显示\n\nonMounted(() => {\n  updateWorldClocks()\n  timer = window.setInterval(updateWorldClocks, 1000)\n})\n\nonUnmounted(() => {\n  if (timer) {\n    clearInterval(timer)\n  }\n})\n</script>\n\n<style scoped>\n.demo-section {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  border: 1px solid #e9ecef;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n}\n\n.demo-section h2 {\n  color: #2c3e50;\n  font-size: 1.3em;\n  font-weight: 600;\n  margin: 0;\n}\n\n.timezone-selector {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.timezone-selector label {\n  font-size: 0.9em;\n  color: #6c757d;\n  font-weight: 500;\n  white-space: nowrap;\n}\n\n.timezone-selector select {\n  padding: 6px 12px;\n  border: 1px solid #e9ecef;\n  border-radius: 4px;\n  background: white;\n  color: #495057;\n  font-size: 0.85em;\n  min-width: 180px;\n  cursor: pointer;\n}\n\n.timezone-selector select:focus {\n  outline: none;\n  border-color: #007bff;\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\n}\n\n.world-clock-grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-auto-rows: 1fr;\n  gap: 12px;\n}\n\n.world-clock-card {\n  background: #fafbfc;\n  border: 1px solid #e9ecef;\n  border-radius: 6px;\n  padding: 0;\n  transition: all 0.2s ease;\n  display: flex;\n  flex-direction: column;\n  min-height: 160px;\n  position: relative;\n}\n\n.world-clock-card:hover {\n  border-color: #dee2e6;\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n\n.card-content {\n  flex: 1;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.clock-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 12px;\n}\n\n.city-info {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.flag {\n  font-size: 1.2em;\n}\n\n.city-name {\n  font-weight: 600;\n  color: #2c3e50;\n  font-size: 0.95em;\n}\n\n.timezone-name {\n  font-size: 0.75em;\n  color: #6c757d;\n  text-align: right;\n  line-height: 1.2;\n}\n\n.time-section {\n  margin-bottom: 12px;\n}\n\n.time-value {\n  font-size: 1.5em;\n  font-weight: 600;\n  color: #2c3e50;\n  font-family: 'Consolas', 'Monaco', monospace;\n  margin-bottom: 6px;\n}\n\n.time-meta {\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n\n.offset-utc, .offset-base, .offset-base-reference {\n  font-size: 0.75em;\n  padding: 2px 6px;\n  border-radius: 3px;\n  display: inline-block;\n  width: fit-content;\n}\n\n.offset-utc {\n  background: #f1f3f5;\n  color: #6c757d;\n  border: 1px solid #e9ecef;\n}\n\n.offset-base {\n  background: #e3f2fd;\n  color: #1976d2;\n  border: 1px solid #1976d2;\n}\n\n.offset-base-reference {\n  background: #fff3e0;\n  border: 1px solid #ffcc02;\n  color: #e65100;\n}\n\n.status-badge-bottom {\n  margin-top: auto;\n  border-top: 1px solid #f1f3f5;\n  border-radius: 0 0 6px 6px;\n}\n\n.bottom-badge {\n  display: block;\n  width: 100%;\n  padding: 8px 12px;\n  text-align: center;\n  font-size: 0.8em;\n  font-weight: 500;\n  border-radius: 0 0 6px 6px;\n}\n\n.dst-badge.bottom-badge {\n  background: #fff8e1;\n  color: #e65100;\n  border-top: 2px solid #ffb74d;\n}\n\n.std-badge.bottom-badge {\n  background: #e3f2fd;\n  color: #1565c0;\n  border-top: 2px solid #64b5f6;\n}\n\n.no-dst-badge.bottom-badge {\n  background: #f5f5f5;\n  color: #616161;\n  border-top: 2px solid #bdbdbd;\n}\n\n.dst-transition-indicator {\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n  z-index: 10;\n}\n\n.dst-info-icon {\n  width: 20px;\n  height: 20px;\n  background: rgba(0, 123, 255, 0.1);\n  border: 1px solid rgba(0, 123, 255, 0.3);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.7em;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.dst-info-icon:hover {\n  background: rgba(0, 123, 255, 0.2);\n  border-color: rgba(0, 123, 255, 0.5);\n  transform: scale(1.1);\n}\n\n.dst-transition-tooltip {\n  position: absolute;\n  bottom: 25px;\n  right: 0;\n  background: white;\n  border: 1px solid #dee2e6;\n  border-radius: 8px;\n  padding: 12px;\n  min-width: 280px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  font-size: 0.75em;\n  z-index: 20;\n  opacity: 0;\n  visibility: hidden;\n  transform: translateY(-8px);\n  transition: all 0.2s ease;\n}\n\n.dst-transition-indicator:hover .dst-transition-tooltip {\n  opacity: 1;\n  visibility: visible;\n  transform: translateY(0);\n}\n\n.transition-item {\n  margin-bottom: 12px;\n}\n\n.transition-item:last-child {\n  margin-bottom: 0;\n}\n\n.transition-label {\n  font-weight: 600;\n  color: #495057;\n  margin-bottom: 6px;\n}\n\n.transition-details {\n  color: #6c757d;\n  line-height: 1.4;\n  white-space: pre-line;\n}\n\n.next-transition .transition-label {\n  color: #28a745;\n}\n\n.last-transition .transition-label {\n  color: #6c757d;\n}\n\n@media (max-width: 1200px) {\n  .world-clock-grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n@media (max-width: 768px) {\n  .section-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 12px;\n  }\n\n  .timezone-selector {\n    width: 100%;\n  }\n\n  .timezone-selector select {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .world-clock-grid {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 8px;\n  }\n\n      .world-clock-card {\n    min-height: 140px;\n  }\n\n  .dst-info-icon {\n    width: 18px;\n    height: 18px;\n    font-size: 0.65em;\n  }\n\n  .dst-transition-tooltip {\n    min-width: 260px;\n    font-size: 0.7em;\n    padding: 10px;\n  }\n\n  .card-content {\n    padding: 12px;\n  }\n\n  .time-value {\n    font-size: 1.3em;\n  }\n\n  .demo-section {\n    padding: 16px;\n  }\n\n  .bottom-badge {\n    font-size: 0.75em;\n    padding: 6px 8px;\n  }\n}\n\n@media (max-width: 480px) {\n  .world-clock-grid {\n    grid-template-columns: 1fr;\n  }\n}\n</style>","<template>\n  <div class=\"demo-section\">\n    <h2>📚 时间概念全览表</h2>\n    <div class=\"responsive-table\">\n      <table class=\"concepts-table\">\n        <thead>\n          <tr>\n            <th>概念</th>\n            <th>英文</th>\n            <th>说明</th>\n            <th>示例/备注</th>\n          </tr>\n        </thead>\n        <tbody>\n          <template v-for=\"category in categories\" :key=\"category\">\n            <tr class=\"category-header\">\n              <td colspan=\"4\">{{ getCategoryIcon(category) }} {{ category }}</td>\n            </tr>\n            <tr\n              v-for=\"concept in getConceptsByCategory(category)\"\n              :key=\"concept.concept\"\n            >\n              <td>{{ concept.concept }}</td>\n              <td>{{ concept.english }}</td>\n              <td>{{ concept.description }}</td>\n              <td><code>{{ concept.example }}</code></td>\n            </tr>\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { TIME_CONCEPTS } from '@/data/constants'\n\nconst categories = computed(() => {\n  const uniqueCategories = [...new Set(TIME_CONCEPTS.map(concept => concept.category))]\n  return uniqueCategories\n})\n\nconst getConceptsByCategory = (category: string) => {\n  return TIME_CONCEPTS.filter(concept => concept.category === category)\n}\n\nconst getCategoryIcon = (category: string) => {\n  const iconMap: Record<string, string> = {\n    '基础时间概念': '⏰',\n    '时区相关': '🌏',\n    '日期时间组件': '📅',\n    '格式化模式': '🎨',\n    '相对时间': '⏳',\n    '国际化概念': '🌐',\n    'JavaScript特有': '💻'\n  }\n  return iconMap[category] || '📝'\n}\n</script>\n\n<style scoped>\n.demo-section {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  border: 1px solid #e9ecef;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n}\n\n.demo-section h2 {\n  color: #2c3e50;\n  margin-bottom: 16px;\n  font-size: 1.3em;\n  font-weight: 600;\n  margin-top: 0;\n}\n\n.responsive-table {\n  overflow-x: auto;\n  border-radius: 6px;\n  border: 1px solid #e9ecef;\n}\n\n.concepts-table {\n  width: 100%;\n  border-collapse: collapse;\n  background: white;\n  font-size: 0.9em;\n}\n\n.concepts-table th,\n.concepts-table td {\n  padding: 10px 12px;\n  text-align: left;\n  border-bottom: 1px solid #f1f3f5;\n  vertical-align: top;\n}\n\n.concepts-table td:first-child {\n  font-weight: 600;\n  color: #2c3e50;\n  min-width: 120px;\n}\n\n.concepts-table td:nth-child(2) {\n  color: #6c757d;\n  font-style: italic;\n  min-width: 140px;\n}\n\n.concepts-table td:nth-child(3) {\n  line-height: 1.6;\n  max-width: 350px;\n}\n\n.concepts-table td:nth-child(4) {\n  min-width: 200px;\n}\n\n.concepts-table th {\n  background: #f8f9fa;\n  color: #495057;\n  font-weight: 600;\n  font-size: 0.85em;\n  border-bottom: 2px solid #e9ecef;\n}\n\n.concepts-table tr:hover:not(.category-header) {\n  background-color: #f8f9fa;\n}\n\n.category-header {\n  background: #e3f2fd !important;\n  color: #1976d2 !important;\n  font-weight: 600;\n}\n\n.category-header td {\n  border-bottom: 2px solid #bbdefb;\n  font-size: 0.9em;\n}\n\n.category-header:hover {\n  background: #e1f5fe !important;\n}\n\ncode {\n  background: #f1f3f5;\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-family: 'Consolas', 'Monaco', monospace;\n  font-size: 0.85em;\n  color: #6f42c1;\n  border: 1px solid #e9ecef;\n}\n\n@media (max-width: 768px) {\n  .demo-section {\n    padding: 16px;\n  }\n\n  .concepts-table {\n    font-size: 0.8em;\n  }\n\n  .concepts-table th,\n  .concepts-table td {\n    padding: 8px;\n  }\n}\n</style>","<template>\n  <div class=\"demo-section\">\n    <h2>💻 常用代码示例</h2>\n\n    <h3>1. 获取时间戳和格式化</h3>\n    <div class=\"code-example\">\n      <pre>{{ CODE_EXAMPLES.timeFormat }}</pre>\n    </div>\n\n    <h3>2. 相对时间计算</h3>\n    <div class=\"code-example\">\n      <pre>{{ CODE_EXAMPLES.relativeTime }}</pre>\n    </div>\n\n    <h3>3. 时区处理与世界时钟</h3>\n    <div class=\"code-example\">\n      <pre>{{ CODE_EXAMPLES.timezone }}</pre>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { CODE_EXAMPLES } from '@/data/constants'\n</script>\n\n<style scoped>\n.demo-section {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  border: 1px solid #e9ecef;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n}\n\n.demo-section h2 {\n  color: #2c3e50;\n  margin-bottom: 16px;\n  font-size: 1.3em;\n  font-weight: 600;\n  margin-top: 0;\n}\n\n.demo-section h3 {\n  color: #495057;\n  margin: 20px 0 10px 0;\n  font-size: 1em;\n  font-weight: 600;\n}\n\n.code-example {\n  background: #f8f9fa;\n  border: 1px solid #e9ecef;\n  border-left: 4px solid #007bff;\n  color: #495057;\n  padding: 16px;\n  border-radius: 4px;\n  margin: 12px 0;\n  font-family: 'Consolas', 'Monaco', monospace;\n  overflow-x: auto;\n  position: relative;\n  font-size: 0.85em;\n}\n\n.code-example::before {\n  content: 'JavaScript';\n  position: absolute;\n  top: 8px;\n  right: 12px;\n  background: #007bff;\n  color: white;\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-size: 0.7em;\n  font-weight: 500;\n}\n\n.code-example pre {\n  margin: 0;\n  line-height: 1.5;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  color: #495057;\n}\n\n@media (max-width: 768px) {\n  .demo-section {\n    padding: 16px;\n  }\n\n  .code-example {\n    padding: 12px;\n    font-size: 0.8em;\n  }\n\n  .demo-section h3 {\n    margin: 16px 0 8px 0;\n  }\n}\n</style>","<template>\n  <div class=\"app\">\n    <div class=\"container\">\n      <div class=\"header\">\n        <h1>🕐 时间概念全面指南</h1>\n      </div>\n\n      <!-- 实时时间展示 -->\n      <TimeDisplay />\n\n      <!-- 时区地图 -->\n      <TimezoneMap />\n\n      <!-- 世界时钟 -->\n      <WorldClock />\n\n      <!-- 下半部分：概念和代码 -->\n      <div class=\"bottom-section\">\n        <!-- 概念表格 -->\n        <ConceptsTable />\n\n        <!-- 代码示例 -->\n        <CodeExamples />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport TimeDisplay from './components/TimeDisplay.vue'\nimport TimezoneMap from './components/TimezoneMap.vue'\nimport WorldClock from './components/WorldClock.vue'\nimport ConceptsTable from './components/ConceptsTable.vue'\nimport CodeExamples from './components/CodeExamples.vue'\n</script>\n\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'PingFang SC', 'Microsoft YaHei', sans-serif;\n  line-height: 1.6;\n  color: #333;\n  background: #f8fafb;\n  min-height: 100vh;\n}\n\n.app {\n  min-height: 100vh;\n}\n\n.container {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: 16px;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 16px;\n}\n\n.header {\n  text-align: center;\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  border: 1px solid #e9ecef;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n}\n\n.header h1 {\n  color: #2c3e50;\n  font-size: 2em;\n  margin-bottom: 8px;\n  font-weight: 600;\n}\n\n.header p {\n  color: #6c757d;\n  font-size: 1em;\n  margin: 0;\n}\n\n.bottom-section {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 16px;\n  align-items: start;\n}\n\n@media (max-width: 1200px) {\n  .bottom-section {\n    grid-template-columns: 1fr;\n  }\n}\n\n@media (max-width: 768px) {\n  .container {\n    padding: 10px;\n    grid-gap: 12px;\n  }\n\n  .header {\n    padding: 16px;\n  }\n\n  .header h1 {\n    font-size: 1.8em;\n  }\n\n  .bottom-section {\n    grid-template-columns: 1fr;\n    gap: 12px;\n  }\n}\n</style>","import { createApp } from 'vue'\nimport App from './App.vue'\n\n// 创建Vue应用实例\nconst app = createApp(App)\n\n// 挂载应用\napp.mount('#app')"],"file":"assets/index-Cy6qMKaD.js"}